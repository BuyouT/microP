
Lab6_C_RSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000780  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001dae  00802000  00000780  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000025a2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000adf  00000000  00000000  0000264a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000025d  00000000  00000000  00003129  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000679  00000000  00000000  00003386  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000015c  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005f7  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000569  00000000  00000000  00004153  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
  da:	00 00       	nop
  dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
  fe:	00 00       	nop
 100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
 102:	00 00       	nop
 104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
 106:	00 00       	nop
 108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
 112:	00 00       	nop
 114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
 116:	00 00       	nop
 118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
 11e:	00 00       	nop
 120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
 122:	00 00       	nop
 124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
 126:	00 00       	nop
 128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
 12e:	00 00       	nop
 130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
 132:	00 00       	nop
 134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
 136:	00 00       	nop
 138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
 13e:	00 00       	nop
 140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
 142:	00 00       	nop
 144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
 146:	00 00       	nop
 148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
 14e:	00 00       	nop
 150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
 152:	00 00       	nop
 154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
 156:	00 00       	nop
 158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
 15e:	00 00       	nop
 160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
 162:	00 00       	nop
 164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
 166:	00 00       	nop
 168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
 16e:	00 00       	nop
 170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
 172:	00 00       	nop
 174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
 176:	00 00       	nop
 178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
 17e:	00 00       	nop
 180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
 182:	00 00       	nop
 184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
 186:	00 00       	nop
 188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
 18e:	00 00       	nop
 190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
 192:	00 00       	nop
 194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
 196:	00 00       	nop
 198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	1d e3       	ldi	r17, 0x3D	; 61
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	f7 e0       	ldi	r31, 0x07	; 7
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ae 3a       	cpi	r26, 0xAE	; 174
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	05 d2       	rcall	.+1034   	; 0x63c <main>
 232:	a4 c2       	rjmp	.+1352   	; 0x77c <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <init_EBI>:
	}
	return 0;
}

void init_EBI() {
	PORTH_DIR = 0x37;
 236:	87 e3       	ldi	r24, 0x37	; 55
 238:	80 93 e0 06 	sts	0x06E0, r24
	PORTH_OUT = 0x33;
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	80 93 e4 06 	sts	0x06E4, r24
	PORTK_DIR = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	80 93 20 07 	sts	0x0720, r24
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration
 248:	e0 e4       	ldi	r30, 0x40	; 64
 24a:	f4 e0       	ldi	r31, 0x04	; 4
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24

	EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
 250:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;            // Set CS0 range to 0x004000 - 0x004FFF
 252:	80 e4       	ldi	r24, 0x40	; 64
 254:	82 8b       	std	Z+18, r24	; 0x12
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_4KB_gc;	    // SRAM mode, 4k address space
 256:	81 e1       	ldi	r24, 0x11	; 17
 258:	80 8b       	std	Z+16, r24	; 0x10

	// BASEADDR is 16 bit (word) register. C interface allows you to set low and high parts with 1
	// instruction instead of the previous two
	EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x1B0000 - 0x1BFFFF
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	9b e1       	ldi	r25, 0x1B	; 27
 25e:	86 8b       	std	Z+22, r24	; 0x16
 260:	97 8b       	std	Z+23, r25	; 0x17
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;
 262:	81 e2       	ldi	r24, 0x21	; 33
 264:	84 8b       	std	Z+20, r24	; 0x14
 266:	08 95       	ret

00000268 <init_AD>:
	check_BF();
	
}

void init_AD() {
	ADCB_CTRLA = 0x01; //channel 0 enabled and enable ADC
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 40 02 	sts	0x0240, r24
	ADCB_CTRLB = 0x0C; //Free-run and u8-bit
 26e:	9c e0       	ldi	r25, 0x0C	; 12
 270:	90 93 41 02 	sts	0x0241, r25
	ADCB_REFCTRL = 0x30; //AREFB
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	90 93 42 02 	sts	0x0242, r25
	ADCB_PRESCALER = 0x07; //512
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	90 93 44 02 	sts	0x0244, r25
	ADCB_CH0_CTRL = 0x81; //Take reading from channel 0
 280:	91 e8       	ldi	r25, 0x81	; 129
 282:	90 93 60 02 	sts	0x0260, r25
	PORTB_DIR = 0x01;
 286:	80 93 20 06 	sts	0x0620, r24
	ADCB_CH0_MUXCTRL = 0x20; //PIN4
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	80 93 61 02 	sts	0x0261, r24
 290:	08 95       	ret

00000292 <k_init>:
}

void k_init(){
	PORTF_PIN4CTRL = 0x18;
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	80 93 b4 06 	sts	0x06B4, r24
	PORTF_PIN5CTRL = 0x18;
 298:	80 93 b5 06 	sts	0x06B5, r24
	PORTF_PIN6CTRL = 0x18;
 29c:	80 93 b6 06 	sts	0x06B6, r24
	PORTF_PIN7CTRL = 0x18;
 2a0:	80 93 b7 06 	sts	0x06B7, r24
	PORTF_DIRSET = 0x0F; //Low bits are outputs
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	80 93 a1 06 	sts	0x06A1, r24
	PORTF_DIRCLR = 0xF0; //High bits are inputs
 2aa:	80 ef       	ldi	r24, 0xF0	; 240
 2ac:	80 93 a2 06 	sts	0x06A2, r24
 2b0:	08 95       	ret

000002b2 <check_BF>:
}

void check_BF() {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	1f 92       	push	r1
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t temp_val = 0;
 2bc:	19 82       	std	Y+1, r1	; 0x01
	while(1) {
		temp_val = __far_mem_read(LCD_COM);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e1       	ldi	r25, 0x10	; 16
 2c2:	ab e1       	ldi	r26, 0x1B	; 27
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	0b b6       	in	r0, 0x3b	; 59
 2c8:	ab bf       	out	0x3b, r26	; 59
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 81       	ld	r18, Z
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	29 83       	std	Y+1, r18	; 0x01
		if((temp_val & 0x80) == 0x00) {
 2d2:	29 81       	ldd	r18, Y+1	; 0x01
 2d4:	22 23       	and	r18, r18
 2d6:	bc f3       	brlt	.-18     	; 0x2c6 <check_BF+0x14>
			break;
		}
	}
}
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <init_lcd>:
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;
}


void init_lcd() {
	check_BF();
 2e0:	e8 df       	rcall	.-48     	; 0x2b2 <check_BF>
	__far_mem_write(LCD_COM,0x38);
 2e2:	28 e3       	ldi	r18, 0x38	; 56
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e1       	ldi	r25, 0x10	; 16
 2e8:	ab e1       	ldi	r26, 0x1B	; 27
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	0b b6       	in	r0, 0x3b	; 59
 2ee:	ab bf       	out	0x3b, r26	; 59
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
 2f4:	0b be       	out	0x3b, r0	; 59
	check_BF();
 2f6:	dd df       	rcall	.-70     	; 0x2b2 <check_BF>
	__far_mem_write(LCD_COM,0x0F);
 2f8:	2f e0       	ldi	r18, 0x0F	; 15
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e1       	ldi	r25, 0x10	; 16
 2fe:	ab e1       	ldi	r26, 0x1B	; 27
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	0b b6       	in	r0, 0x3b	; 59
 304:	ab bf       	out	0x3b, r26	; 59
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
 30a:	0b be       	out	0x3b, r0	; 59
	check_BF();
 30c:	d2 df       	rcall	.-92     	; 0x2b2 <check_BF>
	__far_mem_write(LCD_COM,0x01);
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e1       	ldi	r25, 0x10	; 16
 314:	ab e1       	ldi	r26, 0x1B	; 27
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	0b b6       	in	r0, 0x3b	; 59
 31a:	ab bf       	out	0x3b, r26	; 59
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
 320:	0b be       	out	0x3b, r0	; 59
	check_BF();
 322:	c7 cf       	rjmp	.-114    	; 0x2b2 <check_BF>
 324:	08 95       	ret

00000326 <out_string>:
			break;
		}
	}
}

void out_string(char *str){
 326:	7f 92       	push	r7
 328:	8f 92       	push	r8
 32a:	9f 92       	push	r9
 32c:	af 92       	push	r10
 32e:	bf 92       	push	r11
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
 342:	88 81       	ld	r24, Y
 344:	81 11       	cpse	r24, r1
 346:	19 c0       	rjmp	.+50     	; 0x37a <out_string+0x54>
 348:	16 c0       	rjmp	.+44     	; 0x376 <out_string+0x50>
		check_BF();
 34a:	b3 df       	rcall	.-154    	; 0x2b2 <check_BF>
		//go to the next line when ends the line
		if(cntr == 16)
 34c:	00 31       	cpi	r16, 0x10	; 16
 34e:	11 05       	cpc	r17, r1
 350:	31 f4       	brne	.+12     	; 0x35e <out_string+0x38>
		{
			__far_mem_write(LCD_COM, 0xC0);
 352:	0b b6       	in	r0, 0x3b	; 59
 354:	ab be       	out	0x3b, r10	; 59
 356:	f4 01       	movw	r30, r8
 358:	70 82       	st	Z, r7
 35a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 35c:	aa df       	rcall	.-172    	; 0x2b2 <check_BF>
		}
		check_BF();
 35e:	a9 df       	rcall	.-174    	; 0x2b2 <check_BF>
		__far_mem_write(LCD_DAT,*str);
 360:	89 91       	ld	r24, Y+
 362:	0b b6       	in	r0, 0x3b	; 59
 364:	eb be       	out	0x3b, r14	; 59
 366:	f6 01       	movw	r30, r12
 368:	80 83       	st	Z, r24
 36a:	0b be       	out	0x3b, r0	; 59
		str++;
		cntr++;
 36c:	0f 5f       	subi	r16, 0xFF	; 255
 36e:	1f 4f       	sbci	r17, 0xFF	; 255
}

void out_string(char *str){
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
 370:	88 81       	ld	r24, Y
 372:	81 11       	cpse	r24, r1
 374:	ea cf       	rjmp	.-44     	; 0x34a <out_string+0x24>
		check_BF();
		__far_mem_write(LCD_DAT,*str);
		str++;
		cntr++;
	}
	check_BF();
 376:	9d df       	rcall	.-198    	; 0x2b2 <check_BF>
 378:	19 c0       	rjmp	.+50     	; 0x3ac <out_string+0x86>

void out_string(char *str){
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
		check_BF();
 37a:	9b df       	rcall	.-202    	; 0x2b2 <check_BF>
		}
	}
}

void out_string(char *str){
	int cntr = 0;
 37c:	00 e0       	ldi	r16, 0x00	; 0
 37e:	10 e0       	ldi	r17, 0x00	; 0
		{
			__far_mem_write(LCD_COM, 0xC0);
			check_BF();
		}
		check_BF();
		__far_mem_write(LCD_DAT,*str);
 380:	0f 2e       	mov	r0, r31
 382:	cc 24       	eor	r12, r12
 384:	c3 94       	inc	r12
 386:	f0 e1       	ldi	r31, 0x10	; 16
 388:	df 2e       	mov	r13, r31
 38a:	fb e1       	ldi	r31, 0x1B	; 27
 38c:	ef 2e       	mov	r14, r31
 38e:	f1 2c       	mov	r15, r1
 390:	f0 2d       	mov	r31, r0
	while(*str!= 0) {
		check_BF();
		//go to the next line when ends the line
		if(cntr == 16)
		{
			__far_mem_write(LCD_COM, 0xC0);
 392:	0f 2e       	mov	r0, r31
 394:	81 2c       	mov	r8, r1
 396:	f0 e1       	ldi	r31, 0x10	; 16
 398:	9f 2e       	mov	r9, r31
 39a:	fb e1       	ldi	r31, 0x1B	; 27
 39c:	af 2e       	mov	r10, r31
 39e:	b1 2c       	mov	r11, r1
 3a0:	f0 2d       	mov	r31, r0
 3a2:	0f 2e       	mov	r0, r31
 3a4:	f0 ec       	ldi	r31, 0xC0	; 192
 3a6:	7f 2e       	mov	r7, r31
 3a8:	f0 2d       	mov	r31, r0
 3aa:	d9 cf       	rjmp	.-78     	; 0x35e <out_string+0x38>
		__far_mem_write(LCD_DAT,*str);
		str++;
		cntr++;
	}
	check_BF();
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	bf 90       	pop	r11
 3be:	af 90       	pop	r10
 3c0:	9f 90       	pop	r9
 3c2:	8f 90       	pop	r8
 3c4:	7f 90       	pop	r7
 3c6:	08 95       	ret

000003c8 <extra_credit>:

void extra_credit() {
	//My name in japanese
	__far_mem_write(LCD_DAT, 0x06);
 3c8:	26 e0       	ldi	r18, 0x06	; 6
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e1       	ldi	r25, 0x10	; 16
 3ce:	ab e1       	ldi	r26, 0x1B	; 27
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	0b b6       	in	r0, 0x3b	; 59
 3d4:	ab bf       	out	0x3b, r26	; 59
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
 3da:	0b be       	out	0x3b, r0	; 59
	check_BF();
 3dc:	6a df       	rcall	.-300    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_DAT, 0xBD);
 3de:	2d eb       	ldi	r18, 0xBD	; 189
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e1       	ldi	r25, 0x10	; 16
 3e4:	ab e1       	ldi	r26, 0x1B	; 27
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	0b b6       	in	r0, 0x3b	; 59
 3ea:	ab bf       	out	0x3b, r26	; 59
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
 3f0:	0b be       	out	0x3b, r0	; 59
	check_BF();
 3f2:	5f df       	rcall	.-322    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_DAT, 0xC3);
 3f4:	23 ec       	ldi	r18, 0xC3	; 195
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e1       	ldi	r25, 0x10	; 16
 3fa:	ab e1       	ldi	r26, 0x1B	; 27
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	0b b6       	in	r0, 0x3b	; 59
 400:	ab bf       	out	0x3b, r26	; 59
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	0b be       	out	0x3b, r0	; 59
	check_BF();
 408:	54 df       	rcall	.-344    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_DAT, 0xCC);
 40a:	2c ec       	ldi	r18, 0xCC	; 204
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e1       	ldi	r25, 0x10	; 16
 410:	ab e1       	ldi	r26, 0x1B	; 27
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	0b b6       	in	r0, 0x3b	; 59
 416:	ab bf       	out	0x3b, r26	; 59
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
 41c:	0b be       	out	0x3b, r0	; 59
	check_BF();
 41e:	49 df       	rcall	.-366    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_DAT, 0xB1);
 420:	21 eb       	ldi	r18, 0xB1	; 177
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e1       	ldi	r25, 0x10	; 16
 426:	ab e1       	ldi	r26, 0x1B	; 27
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	0b b6       	in	r0, 0x3b	; 59
 42c:	ab bf       	out	0x3b, r26	; 59
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
 432:	0b be       	out	0x3b, r0	; 59
	check_BF();
 434:	3e df       	rcall	.-388    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_DAT, 0xC9);
 436:	29 ec       	ldi	r18, 0xC9	; 201
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e1       	ldi	r25, 0x10	; 16
 43c:	ab e1       	ldi	r26, 0x1B	; 27
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	0b b6       	in	r0, 0x3b	; 59
 442:	ab bf       	out	0x3b, r26	; 59
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
 448:	0b be       	out	0x3b, r0	; 59
	check_BF();
 44a:	33 df       	rcall	.-410    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_COM, 0x06);
 44c:	26 e0       	ldi	r18, 0x06	; 6
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e1       	ldi	r25, 0x10	; 16
 452:	ab e1       	ldi	r26, 0x1B	; 27
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	0b b6       	in	r0, 0x3b	; 59
 458:	ab bf       	out	0x3b, r26	; 59
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
 45e:	0b be       	out	0x3b, r0	; 59
	check_BF();
 460:	28 cf       	rjmp	.-432    	; 0x2b2 <check_BF>
 462:	08 95       	ret

00000464 <show_V>:
}

void show_V() {
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
	uint16_t inVoltage = ADCB_CH0_RES;
 46c:	e4 e6       	ldi	r30, 0x64	; 100
 46e:	f2 e0       	ldi	r31, 0x02	; 2
 470:	c0 81       	ld	r28, Z
 472:	d1 81       	ldd	r29, Z+1	; 0x01
	uint16_t inINDEX = ADCB_CH0_RES;
 474:	00 81       	ld	r16, Z
 476:	11 81       	ldd	r17, Z+1	; 0x01
	if (inVoltage > 250 && inINDEX > 250) {
 478:	cb 3f       	cpi	r28, 0xFB	; 251
 47a:	d1 05       	cpc	r29, r1
 47c:	38 f0       	brcs	.+14     	; 0x48c <show_V+0x28>
 47e:	0b 3f       	cpi	r16, 0xFB	; 251
 480:	11 05       	cpc	r17, r1
 482:	20 f0       	brcs	.+8      	; 0x48c <show_V+0x28>
		inVoltage = 250;
		inINDEX = 250;
 484:	0a ef       	ldi	r16, 0xFA	; 250
 486:	10 e0       	ldi	r17, 0x00	; 0

void show_V() {
	uint16_t inVoltage = ADCB_CH0_RES;
	uint16_t inINDEX = ADCB_CH0_RES;
	if (inVoltage > 250 && inINDEX > 250) {
		inVoltage = 250;
 488:	ca ef       	ldi	r28, 0xFA	; 250
 48a:	d0 e0       	ldi	r29, 0x00	; 0
		inINDEX = 250;
	}
	check_BF();
 48c:	12 df       	rcall	.-476    	; 0x2b2 <check_BF>
	out_string(LUT[2*inVoltage]);
 48e:	cc 0f       	add	r28, r28
 490:	dd 1f       	adc	r29, r29
 492:	cc 0f       	add	r28, r28
 494:	dd 1f       	adc	r29, r29
 496:	c0 50       	subi	r28, 0x00	; 0
 498:	d0 4e       	sbci	r29, 0xE0	; 224
 49a:	88 81       	ld	r24, Y
 49c:	99 81       	ldd	r25, Y+1	; 0x01
 49e:	43 df       	rcall	.-378    	; 0x326 <out_string>
	check_BF();
 4a0:	08 df       	rcall	.-496    	; 0x2b2 <check_BF>
	out_string(LUT_INDEX[inINDEX]);
 4a2:	f8 01       	movw	r30, r16
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	eb 54       	subi	r30, 0x4B	; 75
 4aa:	f4 4c       	sbci	r31, 0xC4	; 196
 4ac:	80 81       	ld	r24, Z
 4ae:	91 81       	ldd	r25, Z+1	; 0x01
 4b0:	3a df       	rcall	.-396    	; 0x326 <out_string>
	check_BF();
 4b2:	ff de       	rcall	.-514    	; 0x2b2 <check_BF>
	__far_mem_write(LCD_COM, 0x02);
 4b4:	22 e0       	ldi	r18, 0x02	; 2
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e1       	ldi	r25, 0x10	; 16
 4ba:	ab e1       	ldi	r26, 0x1B	; 27
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	0b b6       	in	r0, 0x3b	; 59
 4c0:	ab bf       	out	0x3b, r26	; 59
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
 4c6:	0b be       	out	0x3b, r0	; 59
	check_BF();
 4c8:	f4 de       	rcall	.-536    	; 0x2b2 <check_BF>
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <get_key>:

char get_key(){
	uint8_t key;
	PORTF_OUT = 0x0E;
 4d4:	8e e0       	ldi	r24, 0x0E	; 14
 4d6:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 4da:	00 00       	nop
	key = PORTF_IN;
 4dc:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xEE){
 4e0:	8e 3e       	cpi	r24, 0xEE	; 238
 4e2:	91 f1       	breq	.+100    	; 0x548 <get_key+0x74>
		return '1';
	}
	if(key == 0xDE){
 4e4:	8e 3d       	cpi	r24, 0xDE	; 222
 4e6:	91 f1       	breq	.+100    	; 0x54c <get_key+0x78>
		return '5'; //Change to 4 later
	}
	if(key == 0xBE){
 4e8:	8e 3b       	cpi	r24, 0xBE	; 190
 4ea:	91 f1       	breq	.+100    	; 0x550 <get_key+0x7c>
		return '7';
	}
	if(key == 0x7E){
 4ec:	8e 37       	cpi	r24, 0x7E	; 126
 4ee:	91 f1       	breq	.+100    	; 0x554 <get_key+0x80>
		return '#'; //Change to * later
	}
	
	PORTF_OUT = 0x0D; 
 4f0:	8d e0       	ldi	r24, 0x0D	; 13
 4f2:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 4f6:	00 00       	nop
	key = PORTF_IN;
 4f8:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xED){
 4fc:	8d 3e       	cpi	r24, 0xED	; 237
 4fe:	61 f1       	breq	.+88     	; 0x558 <get_key+0x84>
		return '3'; //Change to 2 later
	}
	if(key == 0xDD){
 500:	8d 3d       	cpi	r24, 0xDD	; 221
 502:	61 f1       	breq	.+88     	; 0x55c <get_key+0x88>
		return '5';
	}
	if(key == 0xBD){
 504:	8d 3b       	cpi	r24, 0xBD	; 189
 506:	61 f1       	breq	.+88     	; 0x560 <get_key+0x8c>
		return '@'; //change to 8 later
	}
	if(key == 0x7D){
 508:	8d 37       	cpi	r24, 0x7D	; 125
 50a:	61 f1       	breq	.+88     	; 0x564 <get_key+0x90>
		return '1'; //Change to 0 later
	}
	PORTF_OUT = 0x0B;
 50c:	8b e0       	ldi	r24, 0x0B	; 11
 50e:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 512:	00 00       	nop
	key = PORTF_IN;
 514:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xEB){
 518:	8b 3e       	cpi	r24, 0xEB	; 235
 51a:	31 f1       	breq	.+76     	; 0x568 <get_key+0x94>
		return '3';
	}
	if(key == 0xDB){
 51c:	8b 3d       	cpi	r24, 0xDB	; 219
 51e:	31 f1       	breq	.+76     	; 0x56c <get_key+0x98>
		return '7'; //Change to 6 later
	}
	if(key == 0xBB){
 520:	8b 3b       	cpi	r24, 0xBB	; 187
 522:	31 f1       	breq	.+76     	; 0x570 <get_key+0x9c>
		return '@'; //Change to 9 later
	}
	if(key == 0x7B){
 524:	8b 37       	cpi	r24, 0x7B	; 123
 526:	31 f1       	breq	.+76     	; 0x574 <get_key+0xa0>
		return '#';
	}
	PORTF_OUT = 0x07;
 528:	87 e0       	ldi	r24, 0x07	; 7
 52a:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 52e:	00 00       	nop
	key = PORTF_IN;
 530:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xE7){
 534:	87 3e       	cpi	r24, 0xE7	; 231
 536:	01 f1       	breq	.+64     	; 0x578 <get_key+0xa4>
		return '@'; //Change to A later
	}
	if(key == 0xD7){
 538:	87 3d       	cpi	r24, 0xD7	; 215
 53a:	01 f1       	breq	.+64     	; 0x57c <get_key+0xa8>
		return '@'; //Change to B later
	}
	if(key == 0xB7){
 53c:	87 3b       	cpi	r24, 0xB7	; 183
 53e:	01 f1       	breq	.+64     	; 0x580 <get_key+0xac>
		return '@'; //Change to C later
	}
	if(key == 0x77){
 540:	87 37       	cpi	r24, 0x77	; 119
 542:	01 f5       	brne	.+64     	; 0x584 <get_key+0xb0>
		return '@'; //Change to D later
 544:	80 e4       	ldi	r24, 0x40	; 64
 546:	08 95       	ret
	uint8_t key;
	PORTF_OUT = 0x0E;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xEE){
		return '1';
 548:	81 e3       	ldi	r24, 0x31	; 49
 54a:	08 95       	ret
	}
	if(key == 0xDE){
		return '5'; //Change to 4 later
 54c:	85 e3       	ldi	r24, 0x35	; 53
 54e:	08 95       	ret
	}
	if(key == 0xBE){
		return '7';
 550:	87 e3       	ldi	r24, 0x37	; 55
 552:	08 95       	ret
	}
	if(key == 0x7E){
		return '#'; //Change to * later
 554:	83 e2       	ldi	r24, 0x23	; 35
 556:	08 95       	ret
	
	PORTF_OUT = 0x0D; 
	asm("nop");
	key = PORTF_IN;
	if(key == 0xED){
		return '3'; //Change to 2 later
 558:	83 e3       	ldi	r24, 0x33	; 51
 55a:	08 95       	ret
	}
	if(key == 0xDD){
		return '5';
 55c:	85 e3       	ldi	r24, 0x35	; 53
 55e:	08 95       	ret
	}
	if(key == 0xBD){
		return '@'; //change to 8 later
 560:	80 e4       	ldi	r24, 0x40	; 64
 562:	08 95       	ret
	}
	if(key == 0x7D){
		return '1'; //Change to 0 later
 564:	81 e3       	ldi	r24, 0x31	; 49
 566:	08 95       	ret
	}
	PORTF_OUT = 0x0B;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xEB){
		return '3';
 568:	83 e3       	ldi	r24, 0x33	; 51
 56a:	08 95       	ret
	}
	if(key == 0xDB){
		return '7'; //Change to 6 later
 56c:	87 e3       	ldi	r24, 0x37	; 55
 56e:	08 95       	ret
	}
	if(key == 0xBB){
		return '@'; //Change to 9 later
 570:	80 e4       	ldi	r24, 0x40	; 64
 572:	08 95       	ret
	}
	if(key == 0x7B){
		return '#';
 574:	83 e2       	ldi	r24, 0x23	; 35
 576:	08 95       	ret
	}
	PORTF_OUT = 0x07;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xE7){
		return '@'; //Change to A later
 578:	80 e4       	ldi	r24, 0x40	; 64
 57a:	08 95       	ret
	}
	if(key == 0xD7){
		return '@'; //Change to B later
 57c:	80 e4       	ldi	r24, 0x40	; 64
 57e:	08 95       	ret
	}
	if(key == 0xB7){
		return '@'; //Change to C later
 580:	80 e4       	ldi	r24, 0x40	; 64
 582:	08 95       	ret
	}
	if(key == 0x77){
		return '@'; //Change to D later
	}
	
	return '&';
 584:	86 e2       	ldi	r24, 0x26	; 38
}
 586:	08 95       	ret

00000588 <delay>:

void delay() {
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	00 d0       	rcall	.+0      	; 0x58e <delay+0x6>
 58e:	1f 92       	push	r1
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks; //Volatile prevents compiler optimization
	for(ticks=0;ticks<=10000;ticks++); //convenient delay
 594:	19 82       	std	Y+1, r1	; 0x01
 596:	1a 82       	std	Y+2, r1	; 0x02
 598:	1b 82       	std	Y+3, r1	; 0x03
 59a:	1c 82       	std	Y+4, r1	; 0x04
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	9a 81       	ldd	r25, Y+2	; 0x02
 5a0:	ab 81       	ldd	r26, Y+3	; 0x03
 5a2:	bc 81       	ldd	r27, Y+4	; 0x04
 5a4:	81 31       	cpi	r24, 0x11	; 17
 5a6:	97 42       	sbci	r25, 0x27	; 39
 5a8:	a1 05       	cpc	r26, r1
 5aa:	b1 05       	cpc	r27, r1
 5ac:	a0 f4       	brcc	.+40     	; 0x5d6 <delay+0x4e>
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	9a 81       	ldd	r25, Y+2	; 0x02
 5b2:	ab 81       	ldd	r26, Y+3	; 0x03
 5b4:	bc 81       	ldd	r27, Y+4	; 0x04
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	a1 1d       	adc	r26, r1
 5ba:	b1 1d       	adc	r27, r1
 5bc:	89 83       	std	Y+1, r24	; 0x01
 5be:	9a 83       	std	Y+2, r25	; 0x02
 5c0:	ab 83       	std	Y+3, r26	; 0x03
 5c2:	bc 83       	std	Y+4, r27	; 0x04
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	9a 81       	ldd	r25, Y+2	; 0x02
 5c8:	ab 81       	ldd	r26, Y+3	; 0x03
 5ca:	bc 81       	ldd	r27, Y+4	; 0x04
 5cc:	81 31       	cpi	r24, 0x11	; 17
 5ce:	97 42       	sbci	r25, 0x27	; 39
 5d0:	a1 05       	cpc	r26, r1
 5d2:	b1 05       	cpc	r27, r1
 5d4:	60 f3       	brcs	.-40     	; 0x5ae <delay+0x26>
}
 5d6:	24 96       	adiw	r28, 0x04	; 4
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <delay2>:

void delay2() {
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <delay2+0x6>
 5e8:	1f 92       	push	r1
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks; //Volatile prevents compiler optimization
	for(ticks=0;ticks<=2500;ticks++); //convenient delay
 5ee:	19 82       	std	Y+1, r1	; 0x01
 5f0:	1a 82       	std	Y+2, r1	; 0x02
 5f2:	1b 82       	std	Y+3, r1	; 0x03
 5f4:	1c 82       	std	Y+4, r1	; 0x04
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	9a 81       	ldd	r25, Y+2	; 0x02
 5fa:	ab 81       	ldd	r26, Y+3	; 0x03
 5fc:	bc 81       	ldd	r27, Y+4	; 0x04
 5fe:	85 3c       	cpi	r24, 0xC5	; 197
 600:	99 40       	sbci	r25, 0x09	; 9
 602:	a1 05       	cpc	r26, r1
 604:	b1 05       	cpc	r27, r1
 606:	a0 f4       	brcc	.+40     	; 0x630 <delay2+0x4e>
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	ab 81       	ldd	r26, Y+3	; 0x03
 60e:	bc 81       	ldd	r27, Y+4	; 0x04
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	a1 1d       	adc	r26, r1
 614:	b1 1d       	adc	r27, r1
 616:	89 83       	std	Y+1, r24	; 0x01
 618:	9a 83       	std	Y+2, r25	; 0x02
 61a:	ab 83       	std	Y+3, r26	; 0x03
 61c:	bc 83       	std	Y+4, r27	; 0x04
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	9a 81       	ldd	r25, Y+2	; 0x02
 622:	ab 81       	ldd	r26, Y+3	; 0x03
 624:	bc 81       	ldd	r27, Y+4	; 0x04
 626:	85 3c       	cpi	r24, 0xC5	; 197
 628:	99 40       	sbci	r25, 0x09	; 9
 62a:	a1 05       	cpc	r26, r1
 62c:	b1 05       	cpc	r27, r1
 62e:	60 f3       	brcs	.-40     	; 0x608 <delay2+0x26>
 630:	24 96       	adiw	r28, 0x04	; 4
 632:	cd bf       	out	0x3d, r28	; 61
 634:	de bf       	out	0x3e, r29	; 62
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <main>:
void delay2();
void extra_credit();

int main(void)
{
    init_EBI();
 63c:	fc dd       	rcall	.-1032   	; 0x236 <init_EBI>
	init_lcd();
 63e:	50 de       	rcall	.-864    	; 0x2e0 <init_lcd>
	init_AD();
 640:	13 de       	rcall	.-986    	; 0x268 <init_AD>
	k_init();
 642:	27 de       	rcall	.-946    	; 0x292 <k_init>
	char *ec = "Stefano in jap:";
	char *name =  "Stefano Reyna";
	char *schartz = "May the Schwartzbe with you!";
	char ck = '1';
	char lk = '3';
	int powah = 1;
 644:	c1 e0       	ldi	r28, 0x01	; 1
 646:	d0 e0       	ldi	r29, 0x00	; 0
	
	char *ec = "Stefano in jap:";
	char *name =  "Stefano Reyna";
	char *schartz = "May the Schwartzbe with you!";
	char ck = '1';
	char lk = '3';
 648:	03 e3       	ldi	r16, 0x33	; 51
					check_BF();
					delay();
					powah = 0;
					break;
				}
				__far_mem_write(LCD_COM, 0x0F); //if off
 64a:	0f 2e       	mov	r0, r31
 64c:	c1 2c       	mov	r12, r1
 64e:	f0 e1       	ldi	r31, 0x10	; 16
 650:	df 2e       	mov	r13, r31
 652:	fb e1       	ldi	r31, 0x1B	; 27
 654:	ef 2e       	mov	r14, r31
 656:	f1 2c       	mov	r15, r1
 658:	f0 2d       	mov	r31, r0
 65a:	0f 2e       	mov	r0, r31
 65c:	ff e0       	ldi	r31, 0x0F	; 15
 65e:	8f 2e       	mov	r8, r31
 660:	f0 2d       	mov	r31, r0
				} while (ck2 == '&' || ck2 == '7' );
				lk = '7';
				break;
			case '#': //function 5
				if (powah == 1) { //If on
					__far_mem_write(LCD_COM, 0x08);
 662:	68 94       	set
 664:	77 24       	eor	r7, r7
 666:	73 f8       	bld	r7, 3
				__far_mem_write(LCD_COM, 0x06);
				check_BF();
				lk = '1';
				break;
			case '3': //funtion 2
				__far_mem_write(LCD_COM, 0x01);
 668:	bb 24       	eor	r11, r11
 66a:	b3 94       	inc	r11
				break;
			case '@': //function 6
				__far_mem_write(LCD_COM, 0x01);
				check_BF();
				out_string(ec);
				__far_mem_write(LCD_COM, 0xC0);
 66c:	0f 2e       	mov	r0, r31
 66e:	f0 ec       	ldi	r31, 0xC0	; 192
 670:	9f 2e       	mov	r9, r31
 672:	f0 2d       	mov	r31, r0
				extra_credit();
				__far_mem_write(LCD_COM, 0x06);
 674:	0f 2e       	mov	r0, r31
 676:	f6 e0       	ldi	r31, 0x06	; 6
 678:	af 2e       	mov	r10, r31
 67a:	f0 2d       	mov	r31, r0
	while (1) {
		if (ck == '&') {
			ck = lk;
		}
		do {
			ck = get_key();
 67c:	2b df       	rcall	.-426    	; 0x4d4 <get_key>
 67e:	18 2f       	mov	r17, r24
			if (ck == '#') {
 680:	83 32       	cpi	r24, 0x23	; 35
 682:	09 f4       	brne	.+2      	; 0x686 <main+0x4a>
 684:	4e c0       	rjmp	.+156    	; 0x722 <main+0xe6>
				break;
			}
		} while (ck == lk);
 686:	08 17       	cp	r16, r24
 688:	c9 f3       	breq	.-14     	; 0x67c <main+0x40>
		switch (ck) {
 68a:	83 33       	cpi	r24, 0x33	; 51
 68c:	09 f1       	breq	.+66     	; 0x6d0 <main+0x94>
 68e:	30 f4       	brcc	.+12     	; 0x69c <main+0x60>
 690:	83 32       	cpi	r24, 0x23	; 35
 692:	09 f4       	brne	.+2      	; 0x696 <main+0x5a>
 694:	46 c0       	rjmp	.+140    	; 0x722 <main+0xe6>
 696:	81 33       	cpi	r24, 0x31	; 49
 698:	51 f0       	breq	.+20     	; 0x6ae <main+0x72>
 69a:	f0 cf       	rjmp	.-32     	; 0x67c <main+0x40>
 69c:	87 33       	cpi	r24, 0x37	; 55
 69e:	09 f4       	brne	.+2      	; 0x6a2 <main+0x66>
 6a0:	30 c0       	rjmp	.+96     	; 0x702 <main+0xc6>
 6a2:	80 34       	cpi	r24, 0x40	; 64
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <main+0x6c>
 6a6:	53 c0       	rjmp	.+166    	; 0x74e <main+0x112>
 6a8:	85 33       	cpi	r24, 0x35	; 53
 6aa:	41 f7       	brne	.-48     	; 0x67c <main+0x40>
 6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <main+0xa4>
			case '1': //function 1
				__far_mem_write(LCD_COM, 0x01);
 6ae:	0b b6       	in	r0, 0x3b	; 59
 6b0:	eb be       	out	0x3b, r14	; 59
 6b2:	f6 01       	movw	r30, r12
 6b4:	b0 82       	st	Z, r11
 6b6:	0b be       	out	0x3b, r0	; 59
				check_BF();
 6b8:	fc dd       	rcall	.-1032   	; 0x2b2 <check_BF>
				out_string(name);
 6ba:	82 ef       	ldi	r24, 0xF2	; 242
 6bc:	93 e2       	ldi	r25, 0x23	; 35
 6be:	33 de       	rcall	.-922    	; 0x326 <out_string>
				__far_mem_write(LCD_COM, 0x06);
 6c0:	0b b6       	in	r0, 0x3b	; 59
 6c2:	eb be       	out	0x3b, r14	; 59
 6c4:	f6 01       	movw	r30, r12
 6c6:	a0 82       	st	Z, r10
 6c8:	0b be       	out	0x3b, r0	; 59
				check_BF();
 6ca:	f3 dd       	rcall	.-1050   	; 0x2b2 <check_BF>
				lk = '1';
 6cc:	01 2f       	mov	r16, r17
				break;
 6ce:	d6 cf       	rjmp	.-84     	; 0x67c <main+0x40>
			case '3': //funtion 2
				__far_mem_write(LCD_COM, 0x01);
 6d0:	0b b6       	in	r0, 0x3b	; 59
 6d2:	eb be       	out	0x3b, r14	; 59
 6d4:	f6 01       	movw	r30, r12
 6d6:	b0 82       	st	Z, r11
 6d8:	0b be       	out	0x3b, r0	; 59
				check_BF();
 6da:	eb dd       	rcall	.-1066   	; 0x2b2 <check_BF>
				lk = '3';
 6dc:	01 2f       	mov	r16, r17
				break;
 6de:	ce cf       	rjmp	.-100    	; 0x67c <main+0x40>
			case '5': //function 3
				__far_mem_write(LCD_COM, 0x01);
 6e0:	0b b6       	in	r0, 0x3b	; 59
 6e2:	eb be       	out	0x3b, r14	; 59
 6e4:	f6 01       	movw	r30, r12
 6e6:	b0 82       	st	Z, r11
 6e8:	0b be       	out	0x3b, r0	; 59
				check_BF();
 6ea:	e3 dd       	rcall	.-1082   	; 0x2b2 <check_BF>
				out_string(schartz);
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	94 e2       	ldi	r25, 0x24	; 36
 6f0:	1a de       	rcall	.-972    	; 0x326 <out_string>
				__far_mem_write(LCD_COM, 0x06);
 6f2:	0b b6       	in	r0, 0x3b	; 59
 6f4:	eb be       	out	0x3b, r14	; 59
 6f6:	f6 01       	movw	r30, r12
 6f8:	a0 82       	st	Z, r10
 6fa:	0b be       	out	0x3b, r0	; 59
				check_BF();
 6fc:	da dd       	rcall	.-1100   	; 0x2b2 <check_BF>
				lk = '5';
 6fe:	01 2f       	mov	r16, r17
				break;
 700:	bd cf       	rjmp	.-134    	; 0x67c <main+0x40>
			case '7': //function 4
				__far_mem_write(LCD_COM, 0x01);
 702:	0b b6       	in	r0, 0x3b	; 59
 704:	eb be       	out	0x3b, r14	; 59
 706:	f6 01       	movw	r30, r12
 708:	b0 82       	st	Z, r11
 70a:	0b be       	out	0x3b, r0	; 59
				check_BF();
 70c:	d2 dd       	rcall	.-1116   	; 0x2b2 <check_BF>
				do {
					ck2 = get_key();
 70e:	e2 de       	rcall	.-572    	; 0x4d4 <get_key>
 710:	08 2f       	mov	r16, r24
					show_V();
 712:	a8 de       	rcall	.-688    	; 0x464 <show_V>
					delay2();
 714:	66 df       	rcall	.-308    	; 0x5e2 <delay2>
				} while (ck2 == '&' || ck2 == '7' );
 716:	06 32       	cpi	r16, 0x26	; 38
 718:	d1 f3       	breq	.-12     	; 0x70e <main+0xd2>
 71a:	07 33       	cpi	r16, 0x37	; 55
 71c:	c1 f3       	breq	.-16     	; 0x70e <main+0xd2>
				lk = '7';
 71e:	01 2f       	mov	r16, r17
 720:	ad cf       	rjmp	.-166    	; 0x67c <main+0x40>
				break;
			case '#': //function 5
				if (powah == 1) { //If on
 722:	21 97       	sbiw	r28, 0x01	; 1
 724:	51 f4       	brne	.+20     	; 0x73a <main+0xfe>
					__far_mem_write(LCD_COM, 0x08);
 726:	0b b6       	in	r0, 0x3b	; 59
 728:	eb be       	out	0x3b, r14	; 59
 72a:	f6 01       	movw	r30, r12
 72c:	70 82       	st	Z, r7
 72e:	0b be       	out	0x3b, r0	; 59
					check_BF();
 730:	c0 dd       	rcall	.-1152   	; 0x2b2 <check_BF>
					delay();
 732:	2a df       	rcall	.-428    	; 0x588 <delay>
					powah = 0;
 734:	c0 e0       	ldi	r28, 0x00	; 0
 736:	d0 e0       	ldi	r29, 0x00	; 0
					break;
 738:	a1 cf       	rjmp	.-190    	; 0x67c <main+0x40>
				}
				__far_mem_write(LCD_COM, 0x0F); //if off
 73a:	0b b6       	in	r0, 0x3b	; 59
 73c:	eb be       	out	0x3b, r14	; 59
 73e:	f6 01       	movw	r30, r12
 740:	80 82       	st	Z, r8
 742:	0b be       	out	0x3b, r0	; 59
				check_BF();
 744:	b6 dd       	rcall	.-1172   	; 0x2b2 <check_BF>
				delay();
 746:	20 df       	rcall	.-448    	; 0x588 <delay>
				powah = 1;
 748:	c1 e0       	ldi	r28, 0x01	; 1
 74a:	d0 e0       	ldi	r29, 0x00	; 0
				break;
 74c:	97 cf       	rjmp	.-210    	; 0x67c <main+0x40>
			case '@': //function 6
				__far_mem_write(LCD_COM, 0x01);
 74e:	0b b6       	in	r0, 0x3b	; 59
 750:	eb be       	out	0x3b, r14	; 59
 752:	f6 01       	movw	r30, r12
 754:	b0 82       	st	Z, r11
 756:	0b be       	out	0x3b, r0	; 59
				check_BF();
 758:	ac dd       	rcall	.-1192   	; 0x2b2 <check_BF>
				out_string(ec);
 75a:	8d e1       	ldi	r24, 0x1D	; 29
 75c:	94 e2       	ldi	r25, 0x24	; 36
 75e:	e3 dd       	rcall	.-1082   	; 0x326 <out_string>
				__far_mem_write(LCD_COM, 0xC0);
 760:	0b b6       	in	r0, 0x3b	; 59
 762:	eb be       	out	0x3b, r14	; 59
 764:	f6 01       	movw	r30, r12
 766:	90 82       	st	Z, r9
 768:	0b be       	out	0x3b, r0	; 59
				extra_credit();
 76a:	2e de       	rcall	.-932    	; 0x3c8 <extra_credit>
				__far_mem_write(LCD_COM, 0x06);
 76c:	0b b6       	in	r0, 0x3b	; 59
 76e:	eb be       	out	0x3b, r14	; 59
 770:	f6 01       	movw	r30, r12
 772:	a0 82       	st	Z, r10
 774:	0b be       	out	0x3b, r0	; 59
				check_BF();
 776:	9d dd       	rcall	.-1222   	; 0x2b2 <check_BF>
				lk = '@';
 778:	01 2f       	mov	r16, r17
				break;
 77a:	80 cf       	rjmp	.-256    	; 0x67c <main+0x40>

0000077c <_exit>:
 77c:	f8 94       	cli

0000077e <__stop_program>:
 77e:	ff cf       	rjmp	.-2      	; 0x77e <__stop_program>
