
Lab6_B_RSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001d82  00802000  000004de  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000076f  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001fe  00000000  00000000  00002acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000378  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000010c  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005c1  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002c8  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
  da:	00 00       	nop
  dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
  fe:	00 00       	nop
 100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
 102:	00 00       	nop
 104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
 106:	00 00       	nop
 108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
 112:	00 00       	nop
 114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
 116:	00 00       	nop
 118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
 11e:	00 00       	nop
 120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
 122:	00 00       	nop
 124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
 126:	00 00       	nop
 128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
 12e:	00 00       	nop
 130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
 132:	00 00       	nop
 134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
 136:	00 00       	nop
 138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
 13e:	00 00       	nop
 140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
 142:	00 00       	nop
 144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
 146:	00 00       	nop
 148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
 14e:	00 00       	nop
 150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
 152:	00 00       	nop
 154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
 156:	00 00       	nop
 158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
 15e:	00 00       	nop
 160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
 162:	00 00       	nop
 164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
 166:	00 00       	nop
 168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
 16e:	00 00       	nop
 170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
 172:	00 00       	nop
 174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
 176:	00 00       	nop
 178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
 17e:	00 00       	nop
 180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
 182:	00 00       	nop
 184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
 186:	00 00       	nop
 188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
 18e:	00 00       	nop
 190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
 192:	00 00       	nop
 194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
 196:	00 00       	nop
 198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	1d e3       	ldi	r17, 0x3D	; 61
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee ed       	ldi	r30, 0xDE	; 222
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 38       	cpi	r26, 0x82	; 130
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	3f d1       	rcall	.+638    	; 0x4b0 <main>
 232:	53 c1       	rjmp	.+678    	; 0x4da <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <init_EBI>:
	
	return 0;
}

void init_EBI() {
	PORTH_DIR = 0x37;
 236:	87 e3       	ldi	r24, 0x37	; 55
 238:	80 93 e0 06 	sts	0x06E0, r24
	PORTH_OUT = 0x33;
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	80 93 e4 06 	sts	0x06E4, r24
	PORTK_DIR = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	80 93 20 07 	sts	0x0720, r24
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration
 248:	e0 e4       	ldi	r30, 0x40	; 64
 24a:	f4 e0       	ldi	r31, 0x04	; 4
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24

    EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
 250:	13 8a       	std	Z+19, r1	; 0x13
    EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;            // Set CS0 range to 0x004000 - 0x004FFF
 252:	80 e4       	ldi	r24, 0x40	; 64
 254:	82 8b       	std	Z+18, r24	; 0x12
    EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_4KB_gc;	    // SRAM mode, 4k address space	
 256:	81 e1       	ldi	r24, 0x11	; 17
 258:	80 8b       	std	Z+16, r24	; 0x10

    // BASEADDR is 16 bit (word) register. C interface allows you to set low and high parts with 1
    // instruction instead of the previous two
    EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x1B0000 - 0x1BFFFF
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	9b e1       	ldi	r25, 0x1B	; 27
 25e:	86 8b       	std	Z+22, r24	; 0x16
 260:	97 8b       	std	Z+23, r25	; 0x17
    EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;
 262:	81 e2       	ldi	r24, 0x21	; 33
 264:	84 8b       	std	Z+20, r24	; 0x14
 266:	08 95       	ret

00000268 <init_AD>:
	check_BF();
	
}

void init_AD() {
	ADCB_CTRLA = 0x01; //channel 0 enabled and enable ADC
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 40 02 	sts	0x0240, r24
	ADCB_CTRLB = 0x0C; //Free-run and u8-bit
 26e:	9c e0       	ldi	r25, 0x0C	; 12
 270:	90 93 41 02 	sts	0x0241, r25
	ADCB_REFCTRL = 0x30; //AREFB 
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	90 93 42 02 	sts	0x0242, r25
	ADCB_PRESCALER = 0x07; //512
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	90 93 44 02 	sts	0x0244, r25
	ADCB_CH0_CTRL = 0x81; //Take reading from channel 0
 280:	91 e8       	ldi	r25, 0x81	; 129
 282:	90 93 60 02 	sts	0x0260, r25
	PORTB_DIR = 0x01;
 286:	80 93 20 06 	sts	0x0620, r24
	ADCB_CH0_MUXCTRL = 0x20; //PIN4	
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	80 93 61 02 	sts	0x0261, r24
 290:	08 95       	ret

00000292 <check_BF>:
}

void check_BF() {
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	1f 92       	push	r1
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t temp_val = 0;
 29c:	19 82       	std	Y+1, r1	; 0x01
	while(1) {
		temp_val = __far_mem_read(LCD_COM);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e1       	ldi	r25, 0x10	; 16
 2a2:	ab e1       	ldi	r26, 0x1B	; 27
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	0b b6       	in	r0, 0x3b	; 59
 2a8:	ab bf       	out	0x3b, r26	; 59
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 81       	ld	r18, Z
 2ae:	0b be       	out	0x3b, r0	; 59
 2b0:	29 83       	std	Y+1, r18	; 0x01
		if((temp_val & 0x80) == 0x00) {
 2b2:	29 81       	ldd	r18, Y+1	; 0x01
 2b4:	22 23       	and	r18, r18
 2b6:	bc f3       	brlt	.-18     	; 0x2a6 <check_BF+0x14>
			break;
		}
	}
}
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <init_lcd>:
    EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;
}


void init_lcd() {
	check_BF();
 2c0:	e8 df       	rcall	.-48     	; 0x292 <check_BF>
	__far_mem_write(LCD_COM,0x38);
 2c2:	28 e3       	ldi	r18, 0x38	; 56
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e1       	ldi	r25, 0x10	; 16
 2c8:	ab e1       	ldi	r26, 0x1B	; 27
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	ab bf       	out	0x3b, r26	; 59
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
 2d4:	0b be       	out	0x3b, r0	; 59
	check_BF();
 2d6:	dd df       	rcall	.-70     	; 0x292 <check_BF>
	__far_mem_write(LCD_COM,0x0F);
 2d8:	2f e0       	ldi	r18, 0x0F	; 15
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e1       	ldi	r25, 0x10	; 16
 2de:	ab e1       	ldi	r26, 0x1B	; 27
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	0b b6       	in	r0, 0x3b	; 59
 2e4:	ab bf       	out	0x3b, r26	; 59
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	0b be       	out	0x3b, r0	; 59
	check_BF();
 2ec:	d2 df       	rcall	.-92     	; 0x292 <check_BF>
	__far_mem_write(LCD_COM,0x01);
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e1       	ldi	r25, 0x10	; 16
 2f4:	ab e1       	ldi	r26, 0x1B	; 27
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	ab bf       	out	0x3b, r26	; 59
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	0b be       	out	0x3b, r0	; 59
	check_BF();
 302:	c7 cf       	rjmp	.-114    	; 0x292 <check_BF>
 304:	08 95       	ret

00000306 <out_string>:
			break;
		}
	}
}

void out_string(char *str){
 306:	7f 92       	push	r7
 308:	8f 92       	push	r8
 30a:	9f 92       	push	r9
 30c:	af 92       	push	r10
 30e:	bf 92       	push	r11
 310:	cf 92       	push	r12
 312:	df 92       	push	r13
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
 322:	88 81       	ld	r24, Y
 324:	81 11       	cpse	r24, r1
 326:	19 c0       	rjmp	.+50     	; 0x35a <out_string+0x54>
 328:	16 c0       	rjmp	.+44     	; 0x356 <out_string+0x50>
		check_BF();
 32a:	b3 df       	rcall	.-154    	; 0x292 <check_BF>
		//go to the next line when ends the line
		if(cntr == 16)
 32c:	00 31       	cpi	r16, 0x10	; 16
 32e:	11 05       	cpc	r17, r1
 330:	31 f4       	brne	.+12     	; 0x33e <out_string+0x38>
		{
			__far_mem_write(LCD_COM, 0xC0);
 332:	0b b6       	in	r0, 0x3b	; 59
 334:	ab be       	out	0x3b, r10	; 59
 336:	f4 01       	movw	r30, r8
 338:	70 82       	st	Z, r7
 33a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 33c:	aa df       	rcall	.-172    	; 0x292 <check_BF>
		}
		check_BF();
 33e:	a9 df       	rcall	.-174    	; 0x292 <check_BF>
		__far_mem_write(LCD_DAT,*str);
 340:	89 91       	ld	r24, Y+
 342:	0b b6       	in	r0, 0x3b	; 59
 344:	eb be       	out	0x3b, r14	; 59
 346:	f6 01       	movw	r30, r12
 348:	80 83       	st	Z, r24
 34a:	0b be       	out	0x3b, r0	; 59
		str++;
		cntr++;
 34c:	0f 5f       	subi	r16, 0xFF	; 255
 34e:	1f 4f       	sbci	r17, 0xFF	; 255
}

void out_string(char *str){
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
 350:	88 81       	ld	r24, Y
 352:	81 11       	cpse	r24, r1
 354:	ea cf       	rjmp	.-44     	; 0x32a <out_string+0x24>
		check_BF();
		__far_mem_write(LCD_DAT,*str);
		str++;
		cntr++;
	}
	check_BF();
 356:	9d df       	rcall	.-198    	; 0x292 <check_BF>
 358:	19 c0       	rjmp	.+50     	; 0x38c <out_string+0x86>

void out_string(char *str){
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
		check_BF();
 35a:	9b df       	rcall	.-202    	; 0x292 <check_BF>
		}
	}
}

void out_string(char *str){
	int cntr = 0;
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
		{
			__far_mem_write(LCD_COM, 0xC0);
			check_BF();
		}
		check_BF();
		__far_mem_write(LCD_DAT,*str);
 360:	0f 2e       	mov	r0, r31
 362:	cc 24       	eor	r12, r12
 364:	c3 94       	inc	r12
 366:	f0 e1       	ldi	r31, 0x10	; 16
 368:	df 2e       	mov	r13, r31
 36a:	fb e1       	ldi	r31, 0x1B	; 27
 36c:	ef 2e       	mov	r14, r31
 36e:	f1 2c       	mov	r15, r1
 370:	f0 2d       	mov	r31, r0
	while(*str!= 0) {
		check_BF();
		//go to the next line when ends the line
		if(cntr == 16)
		{
			__far_mem_write(LCD_COM, 0xC0);
 372:	0f 2e       	mov	r0, r31
 374:	81 2c       	mov	r8, r1
 376:	f0 e1       	ldi	r31, 0x10	; 16
 378:	9f 2e       	mov	r9, r31
 37a:	fb e1       	ldi	r31, 0x1B	; 27
 37c:	af 2e       	mov	r10, r31
 37e:	b1 2c       	mov	r11, r1
 380:	f0 2d       	mov	r31, r0
 382:	0f 2e       	mov	r0, r31
 384:	f0 ec       	ldi	r31, 0xC0	; 192
 386:	7f 2e       	mov	r7, r31
 388:	f0 2d       	mov	r31, r0
 38a:	d9 cf       	rjmp	.-78     	; 0x33e <out_string+0x38>
		__far_mem_write(LCD_DAT,*str);
		str++;
		cntr++;
	}
	check_BF();
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	7f 90       	pop	r7
 3a6:	08 95       	ret

000003a8 <show_V>:

void show_V() {
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
	uint16_t inVoltage = ADCB_CH0_RES;
 3b0:	e4 e6       	ldi	r30, 0x64	; 100
 3b2:	f2 e0       	ldi	r31, 0x02	; 2
 3b4:	c0 81       	ld	r28, Z
 3b6:	d1 81       	ldd	r29, Z+1	; 0x01
	uint16_t inINDEX = ADCB_CH0_RES;
 3b8:	00 81       	ld	r16, Z
 3ba:	11 81       	ldd	r17, Z+1	; 0x01
	asm volatile("nop");
 3bc:	00 00       	nop
	if (2*inVoltage > 500) {
 3be:	ce 01       	movw	r24, r28
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	85 3f       	cpi	r24, 0xF5	; 245
 3c6:	91 40       	sbci	r25, 0x01	; 1
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <show_V+0x2a>
		inVoltage = 500/2;
		inINDEX = 500/2;
 3ca:	0a ef       	ldi	r16, 0xFA	; 250
 3cc:	10 e0       	ldi	r17, 0x00	; 0
void show_V() {
	uint16_t inVoltage = ADCB_CH0_RES;
	uint16_t inINDEX = ADCB_CH0_RES;
	asm volatile("nop");
	if (2*inVoltage > 500) {
		inVoltage = 500/2;
 3ce:	ca ef       	ldi	r28, 0xFA	; 250
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
		inINDEX = 500/2;
	}
	asm volatile("nop");
 3d2:	00 00       	nop
	check_BF();
 3d4:	5e df       	rcall	.-324    	; 0x292 <check_BF>
	out_string(LUT[2*inVoltage]);
 3d6:	cc 0f       	add	r28, r28
 3d8:	dd 1f       	adc	r29, r29
 3da:	fe 01       	movw	r30, r28
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	e0 50       	subi	r30, 0x00	; 0
 3e2:	f0 4e       	sbci	r31, 0xE0	; 224
 3e4:	80 81       	ld	r24, Z
 3e6:	91 81       	ldd	r25, Z+1	; 0x01
 3e8:	8e df       	rcall	.-228    	; 0x306 <out_string>
	check_BF();
 3ea:	53 df       	rcall	.-346    	; 0x292 <check_BF>
	out_string(LUT_INDEX[inINDEX]);
 3ec:	f8 01       	movw	r30, r16
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	e6 57       	subi	r30, 0x76	; 118
 3f4:	f4 4c       	sbci	r31, 0xC4	; 196
 3f6:	80 81       	ld	r24, Z
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	85 df       	rcall	.-246    	; 0x306 <out_string>
	check_BF();
 3fc:	4a df       	rcall	.-364    	; 0x292 <check_BF>
	__far_mem_write(LCD_COM, 0xC0);
 3fe:	20 ec       	ldi	r18, 0xC0	; 192
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e1       	ldi	r25, 0x10	; 16
 404:	ab e1       	ldi	r26, 0x1B	; 27
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	0b b6       	in	r0, 0x3b	; 59
 40a:	ab bf       	out	0x3b, r26	; 59
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
 410:	0b be       	out	0x3b, r0	; 59
	check_BF();
 412:	3f df       	rcall	.-386    	; 0x292 <check_BF>
	if (2*inVoltage < 50) {
 414:	c2 33       	cpi	r28, 0x32	; 50
 416:	d1 05       	cpc	r29, r1
 418:	20 f4       	brcc	.+8      	; 0x422 <show_V+0x7a>
		out_string("LOW");
 41a:	82 ef       	ldi	r24, 0xF2	; 242
 41c:	93 e2       	ldi	r25, 0x23	; 35
 41e:	73 df       	rcall	.-282    	; 0x306 <out_string>
 420:	0a c0       	rjmp	.+20     	; 0x436 <show_V+0x8e>
	}
	
	else if (2*inVoltage > 320) {
 422:	c1 34       	cpi	r28, 0x41	; 65
 424:	d1 40       	sbci	r29, 0x01	; 1
 426:	20 f0       	brcs	.+8      	; 0x430 <show_V+0x88>
		out_string("HIGH");
 428:	86 ef       	ldi	r24, 0xF6	; 246
 42a:	93 e2       	ldi	r25, 0x23	; 35
 42c:	6c df       	rcall	.-296    	; 0x306 <out_string>
 42e:	03 c0       	rjmp	.+6      	; 0x436 <show_V+0x8e>
	}
	
	else {
		out_string("NORMAL");
 430:	8b ef       	ldi	r24, 0xFB	; 251
 432:	93 e2       	ldi	r25, 0x23	; 35
 434:	68 df       	rcall	.-304    	; 0x306 <out_string>
	}
	__far_mem_write(LCD_COM, 0x02);
 436:	22 e0       	ldi	r18, 0x02	; 2
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e1       	ldi	r25, 0x10	; 16
 43c:	ab e1       	ldi	r26, 0x1B	; 27
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	0b b6       	in	r0, 0x3b	; 59
 442:	ab bf       	out	0x3b, r26	; 59
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
 448:	0b be       	out	0x3b, r0	; 59
	check_BF();
 44a:	23 df       	rcall	.-442    	; 0x292 <check_BF>
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <delay>:

void delay() {
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 d0       	rcall	.+0      	; 0x45c <delay+0x6>
 45c:	1f 92       	push	r1
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks; //Volatile prevents compiler optimization
	for(ticks=0;ticks<=10000;ticks++); //convinient delay
 462:	19 82       	std	Y+1, r1	; 0x01
 464:	1a 82       	std	Y+2, r1	; 0x02
 466:	1b 82       	std	Y+3, r1	; 0x03
 468:	1c 82       	std	Y+4, r1	; 0x04
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	ab 81       	ldd	r26, Y+3	; 0x03
 470:	bc 81       	ldd	r27, Y+4	; 0x04
 472:	81 31       	cpi	r24, 0x11	; 17
 474:	97 42       	sbci	r25, 0x27	; 39
 476:	a1 05       	cpc	r26, r1
 478:	b1 05       	cpc	r27, r1
 47a:	a0 f4       	brcc	.+40     	; 0x4a4 <delay+0x4e>
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	9a 81       	ldd	r25, Y+2	; 0x02
 480:	ab 81       	ldd	r26, Y+3	; 0x03
 482:	bc 81       	ldd	r27, Y+4	; 0x04
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	a1 1d       	adc	r26, r1
 488:	b1 1d       	adc	r27, r1
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	9a 83       	std	Y+2, r25	; 0x02
 48e:	ab 83       	std	Y+3, r26	; 0x03
 490:	bc 83       	std	Y+4, r27	; 0x04
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	ab 81       	ldd	r26, Y+3	; 0x03
 498:	bc 81       	ldd	r27, Y+4	; 0x04
 49a:	81 31       	cpi	r24, 0x11	; 17
 49c:	97 42       	sbci	r25, 0x27	; 39
 49e:	a1 05       	cpc	r26, r1
 4a0:	b1 05       	cpc	r27, r1
 4a2:	60 f3       	brcs	.-40     	; 0x47c <delay+0x26>
 4a4:	24 96       	adiw	r28, 0x04	; 4
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <main>:
void show_V();
void delay();

int main(void)
{
    init_EBI();
 4b0:	c2 de       	rcall	.-636    	; 0x236 <init_EBI>
	init_lcd();
 4b2:	06 df       	rcall	.-500    	; 0x2c0 <init_lcd>
	init_AD();
 4b4:	d9 de       	rcall	.-590    	; 0x268 <init_AD>
	
	while(1) {
		__far_mem_write(LCD_COM, 0x01);
 4b6:	0f 2e       	mov	r0, r31
 4b8:	c1 2c       	mov	r12, r1
 4ba:	f0 e1       	ldi	r31, 0x10	; 16
 4bc:	df 2e       	mov	r13, r31
 4be:	fb e1       	ldi	r31, 0x1B	; 27
 4c0:	ef 2e       	mov	r14, r31
 4c2:	f1 2c       	mov	r15, r1
 4c4:	f0 2d       	mov	r31, r0
 4c6:	c1 e0       	ldi	r28, 0x01	; 1
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	eb be       	out	0x3b, r14	; 59
 4cc:	f6 01       	movw	r30, r12
 4ce:	c0 83       	st	Z, r28
 4d0:	0b be       	out	0x3b, r0	; 59
		check_BF();
 4d2:	df de       	rcall	.-578    	; 0x292 <check_BF>
		show_V();
 4d4:	69 df       	rcall	.-302    	; 0x3a8 <show_V>
		delay();
 4d6:	bf df       	rcall	.-130    	; 0x456 <delay>
 4d8:	f7 cf       	rjmp	.-18     	; 0x4c8 <main+0x18>

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
