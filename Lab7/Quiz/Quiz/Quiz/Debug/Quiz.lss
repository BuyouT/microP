
Quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  00000bf2  00000c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001f97  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002b5  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000095a  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b8  00000000  00000000  00003a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000982  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d05  00000000  00000000  0000453e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  00005243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c1       	rjmp	.+678    	; 0x2a8 <__ctors_end>
   2:	00 00       	nop
   4:	6d c1       	rjmp	.+730    	; 0x2e0 <__bad_interrupt>
   6:	00 00       	nop
   8:	6b c1       	rjmp	.+726    	; 0x2e0 <__bad_interrupt>
   a:	00 00       	nop
   c:	69 c1       	rjmp	.+722    	; 0x2e0 <__bad_interrupt>
   e:	00 00       	nop
  10:	67 c1       	rjmp	.+718    	; 0x2e0 <__bad_interrupt>
  12:	00 00       	nop
  14:	65 c1       	rjmp	.+714    	; 0x2e0 <__bad_interrupt>
  16:	00 00       	nop
  18:	63 c1       	rjmp	.+710    	; 0x2e0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c1       	rjmp	.+706    	; 0x2e0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5f c1       	rjmp	.+702    	; 0x2e0 <__bad_interrupt>
  22:	00 00       	nop
  24:	5d c1       	rjmp	.+698    	; 0x2e0 <__bad_interrupt>
  26:	00 00       	nop
  28:	5b c1       	rjmp	.+694    	; 0x2e0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c1       	rjmp	.+690    	; 0x2e0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	57 c1       	rjmp	.+686    	; 0x2e0 <__bad_interrupt>
  32:	00 00       	nop
  34:	55 c1       	rjmp	.+682    	; 0x2e0 <__bad_interrupt>
  36:	00 00       	nop
  38:	53 c1       	rjmp	.+678    	; 0x2e0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	51 c1       	rjmp	.+674    	; 0x2e0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c1       	rjmp	.+670    	; 0x2e0 <__bad_interrupt>
  42:	00 00       	nop
  44:	4d c1       	rjmp	.+666    	; 0x2e0 <__bad_interrupt>
  46:	00 00       	nop
  48:	4b c1       	rjmp	.+662    	; 0x2e0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	49 c1       	rjmp	.+658    	; 0x2e0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	47 c1       	rjmp	.+654    	; 0x2e0 <__bad_interrupt>
  52:	00 00       	nop
  54:	45 c1       	rjmp	.+650    	; 0x2e0 <__bad_interrupt>
  56:	00 00       	nop
  58:	43 c1       	rjmp	.+646    	; 0x2e0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3f c1       	rjmp	.+638    	; 0x2e0 <__bad_interrupt>
  62:	00 00       	nop
  64:	3d c1       	rjmp	.+634    	; 0x2e0 <__bad_interrupt>
  66:	00 00       	nop
  68:	3b c1       	rjmp	.+630    	; 0x2e0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	39 c1       	rjmp	.+626    	; 0x2e0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	37 c1       	rjmp	.+622    	; 0x2e0 <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c1       	rjmp	.+618    	; 0x2e0 <__bad_interrupt>
  76:	00 00       	nop
  78:	33 c1       	rjmp	.+614    	; 0x2e0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	31 c1       	rjmp	.+610    	; 0x2e0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2f c1       	rjmp	.+606    	; 0x2e0 <__bad_interrupt>
  82:	00 00       	nop
  84:	2d c1       	rjmp	.+602    	; 0x2e0 <__bad_interrupt>
  86:	00 00       	nop
  88:	2b c1       	rjmp	.+598    	; 0x2e0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	29 c1       	rjmp	.+594    	; 0x2e0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	27 c1       	rjmp	.+590    	; 0x2e0 <__bad_interrupt>
  92:	00 00       	nop
  94:	25 c1       	rjmp	.+586    	; 0x2e0 <__bad_interrupt>
  96:	00 00       	nop
  98:	23 c1       	rjmp	.+582    	; 0x2e0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	21 c1       	rjmp	.+578    	; 0x2e0 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	1f c1       	rjmp	.+574    	; 0x2e0 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1d c1       	rjmp	.+570    	; 0x2e0 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1b c1       	rjmp	.+566    	; 0x2e0 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	19 c1       	rjmp	.+562    	; 0x2e0 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	17 c1       	rjmp	.+558    	; 0x2e0 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	15 c1       	rjmp	.+554    	; 0x2e0 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	13 c1       	rjmp	.+550    	; 0x2e0 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	11 c1       	rjmp	.+546    	; 0x2e0 <__bad_interrupt>
  be:	00 00       	nop
  c0:	0f c1       	rjmp	.+542    	; 0x2e0 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	0d c1       	rjmp	.+538    	; 0x2e0 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	0b c1       	rjmp	.+534    	; 0x2e0 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	09 c1       	rjmp	.+530    	; 0x2e0 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	07 c1       	rjmp	.+526    	; 0x2e0 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	fa c1       	rjmp	.+1012   	; 0x4ca <__vector_53>
  d6:	00 00       	nop
  d8:	03 c1       	rjmp	.+518    	; 0x2e0 <__bad_interrupt>
  da:	00 00       	nop
  dc:	01 c1       	rjmp	.+514    	; 0x2e0 <__bad_interrupt>
  de:	00 00       	nop
  e0:	ff c0       	rjmp	.+510    	; 0x2e0 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	fd c0       	rjmp	.+506    	; 0x2e0 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	fb c0       	rjmp	.+502    	; 0x2e0 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	f9 c0       	rjmp	.+498    	; 0x2e0 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	f7 c0       	rjmp	.+494    	; 0x2e0 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	f5 c0       	rjmp	.+490    	; 0x2e0 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	f3 c0       	rjmp	.+486    	; 0x2e0 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	f1 c0       	rjmp	.+482    	; 0x2e0 <__bad_interrupt>
  fe:	00 00       	nop
 100:	ef c0       	rjmp	.+478    	; 0x2e0 <__bad_interrupt>
 102:	00 00       	nop
 104:	ed c0       	rjmp	.+474    	; 0x2e0 <__bad_interrupt>
 106:	00 00       	nop
 108:	eb c0       	rjmp	.+470    	; 0x2e0 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	e9 c0       	rjmp	.+466    	; 0x2e0 <__bad_interrupt>
 10e:	00 00       	nop
 110:	e7 c0       	rjmp	.+462    	; 0x2e0 <__bad_interrupt>
 112:	00 00       	nop
 114:	e5 c0       	rjmp	.+458    	; 0x2e0 <__bad_interrupt>
 116:	00 00       	nop
 118:	e3 c0       	rjmp	.+454    	; 0x2e0 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	e1 c0       	rjmp	.+450    	; 0x2e0 <__bad_interrupt>
 11e:	00 00       	nop
 120:	df c0       	rjmp	.+446    	; 0x2e0 <__bad_interrupt>
 122:	00 00       	nop
 124:	dd c0       	rjmp	.+442    	; 0x2e0 <__bad_interrupt>
 126:	00 00       	nop
 128:	db c0       	rjmp	.+438    	; 0x2e0 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	d9 c0       	rjmp	.+434    	; 0x2e0 <__bad_interrupt>
 12e:	00 00       	nop
 130:	d7 c0       	rjmp	.+430    	; 0x2e0 <__bad_interrupt>
 132:	00 00       	nop
 134:	d5 c0       	rjmp	.+426    	; 0x2e0 <__bad_interrupt>
 136:	00 00       	nop
 138:	d3 c0       	rjmp	.+422    	; 0x2e0 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	d1 c0       	rjmp	.+418    	; 0x2e0 <__bad_interrupt>
 13e:	00 00       	nop
 140:	cf c0       	rjmp	.+414    	; 0x2e0 <__bad_interrupt>
 142:	00 00       	nop
 144:	cd c0       	rjmp	.+410    	; 0x2e0 <__bad_interrupt>
 146:	00 00       	nop
 148:	cb c0       	rjmp	.+406    	; 0x2e0 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	c9 c0       	rjmp	.+402    	; 0x2e0 <__bad_interrupt>
 14e:	00 00       	nop
 150:	c7 c0       	rjmp	.+398    	; 0x2e0 <__bad_interrupt>
 152:	00 00       	nop
 154:	c5 c0       	rjmp	.+394    	; 0x2e0 <__bad_interrupt>
 156:	00 00       	nop
 158:	c3 c0       	rjmp	.+390    	; 0x2e0 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	c1 c0       	rjmp	.+386    	; 0x2e0 <__bad_interrupt>
 15e:	00 00       	nop
 160:	bf c0       	rjmp	.+382    	; 0x2e0 <__bad_interrupt>
 162:	00 00       	nop
 164:	bd c0       	rjmp	.+378    	; 0x2e0 <__bad_interrupt>
 166:	00 00       	nop
 168:	bb c0       	rjmp	.+374    	; 0x2e0 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	b9 c0       	rjmp	.+370    	; 0x2e0 <__bad_interrupt>
 16e:	00 00       	nop
 170:	b7 c0       	rjmp	.+366    	; 0x2e0 <__bad_interrupt>
 172:	00 00       	nop
 174:	b5 c0       	rjmp	.+362    	; 0x2e0 <__bad_interrupt>
 176:	00 00       	nop
 178:	b3 c0       	rjmp	.+358    	; 0x2e0 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	b1 c0       	rjmp	.+354    	; 0x2e0 <__bad_interrupt>
 17e:	00 00       	nop
 180:	af c0       	rjmp	.+350    	; 0x2e0 <__bad_interrupt>
 182:	00 00       	nop
 184:	ad c0       	rjmp	.+346    	; 0x2e0 <__bad_interrupt>
 186:	00 00       	nop
 188:	ab c0       	rjmp	.+342    	; 0x2e0 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	a9 c0       	rjmp	.+338    	; 0x2e0 <__bad_interrupt>
 18e:	00 00       	nop
 190:	a7 c0       	rjmp	.+334    	; 0x2e0 <__bad_interrupt>
 192:	00 00       	nop
 194:	a5 c0       	rjmp	.+330    	; 0x2e0 <__bad_interrupt>
 196:	00 00       	nop
 198:	a3 c0       	rjmp	.+326    	; 0x2e0 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	a1 c0       	rjmp	.+322    	; 0x2e0 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	9f c0       	rjmp	.+318    	; 0x2e0 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	9d c0       	rjmp	.+314    	; 0x2e0 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	9b c0       	rjmp	.+310    	; 0x2e0 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	99 c0       	rjmp	.+306    	; 0x2e0 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	97 c0       	rjmp	.+302    	; 0x2e0 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	95 c0       	rjmp	.+298    	; 0x2e0 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	93 c0       	rjmp	.+294    	; 0x2e0 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	91 c0       	rjmp	.+290    	; 0x2e0 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	8f c0       	rjmp	.+286    	; 0x2e0 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	8d c0       	rjmp	.+282    	; 0x2e0 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	8b c0       	rjmp	.+278    	; 0x2e0 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	89 c0       	rjmp	.+274    	; 0x2e0 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	87 c0       	rjmp	.+270    	; 0x2e0 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	85 c0       	rjmp	.+266    	; 0x2e0 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	83 c0       	rjmp	.+262    	; 0x2e0 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	81 c0       	rjmp	.+258    	; 0x2e0 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	7f c0       	rjmp	.+254    	; 0x2e0 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	7d c0       	rjmp	.+250    	; 0x2e0 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	7b c0       	rjmp	.+246    	; 0x2e0 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	79 c0       	rjmp	.+242    	; 0x2e0 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	77 c0       	rjmp	.+238    	; 0x2e0 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	75 c0       	rjmp	.+234    	; 0x2e0 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	73 c0       	rjmp	.+230    	; 0x2e0 <__bad_interrupt>
 1fa:	00 00       	nop
 1fc:	44 04       	cpc	r4, r4
 1fe:	fa 02       	muls	r31, r26
 200:	1a 03       	fmul	r17, r18
 202:	3a 03       	fmul	r19, r18
 204:	60 03       	mulsu	r22, r16
 206:	86 03       	fmuls	r16, r22
 208:	ac 03       	fmulsu	r18, r20
 20a:	d2 03       	fmuls	r21, r18
 20c:	f8 03       	fmulsu	r23, r16
 20e:	1e 04       	cpc	r1, r14
 210:	01 05       	cpc	r16, r1
 212:	01 05       	cpc	r16, r1
 214:	01 05       	cpc	r16, r1
 216:	01 05       	cpc	r16, r1
 218:	01 05       	cpc	r16, r1
 21a:	01 05       	cpc	r16, r1
 21c:	01 05       	cpc	r16, r1
 21e:	6a 04       	cpc	r6, r10
 220:	90 04       	cpc	r9, r0
 222:	b6 04       	cpc	r11, r6
 224:	dc 04       	cpc	r13, r12
 226:	5f 05       	cpc	r21, r15
 228:	0e 05       	cpc	r16, r14
 22a:	17 05       	cpc	r17, r7
 22c:	20 05       	cpc	r18, r0
 22e:	29 05       	cpc	r18, r9
 230:	32 05       	cpc	r19, r2
 232:	3b 05       	cpc	r19, r11
 234:	44 05       	cpc	r20, r4
 236:	4d 05       	cpc	r20, r13
 238:	56 05       	cpc	r21, r6
 23a:	95 05       	cpc	r25, r5
 23c:	95 05       	cpc	r25, r5
 23e:	95 05       	cpc	r25, r5
 240:	95 05       	cpc	r25, r5
 242:	95 05       	cpc	r25, r5
 244:	95 05       	cpc	r25, r5
 246:	95 05       	cpc	r25, r5
 248:	68 05       	cpc	r22, r8
 24a:	71 05       	cpc	r23, r1
 24c:	7a 05       	cpc	r23, r10
 24e:	83 05       	cpc	r24, r3
 250:	95 05       	cpc	r25, r5
 252:	95 05       	cpc	r25, r5
 254:	95 05       	cpc	r25, r5
 256:	95 05       	cpc	r25, r5
 258:	95 05       	cpc	r25, r5
 25a:	95 05       	cpc	r25, r5
 25c:	95 05       	cpc	r25, r5
 25e:	95 05       	cpc	r25, r5
 260:	95 05       	cpc	r25, r5
 262:	95 05       	cpc	r25, r5
 264:	95 05       	cpc	r25, r5
 266:	95 05       	cpc	r25, r5
 268:	95 05       	cpc	r25, r5
 26a:	95 05       	cpc	r25, r5
 26c:	95 05       	cpc	r25, r5
 26e:	95 05       	cpc	r25, r5
 270:	95 05       	cpc	r25, r5
 272:	95 05       	cpc	r25, r5
 274:	95 05       	cpc	r25, r5
 276:	95 05       	cpc	r25, r5
 278:	95 05       	cpc	r25, r5
 27a:	95 05       	cpc	r25, r5
 27c:	95 05       	cpc	r25, r5
 27e:	95 05       	cpc	r25, r5
 280:	95 05       	cpc	r25, r5
 282:	95 05       	cpc	r25, r5
 284:	95 05       	cpc	r25, r5
 286:	95 05       	cpc	r25, r5
 288:	95 05       	cpc	r25, r5
 28a:	95 05       	cpc	r25, r5
 28c:	95 05       	cpc	r25, r5
 28e:	95 05       	cpc	r25, r5
 290:	95 05       	cpc	r25, r5
 292:	95 05       	cpc	r25, r5
 294:	95 05       	cpc	r25, r5
 296:	95 05       	cpc	r25, r5
 298:	95 05       	cpc	r25, r5
 29a:	95 05       	cpc	r25, r5
 29c:	95 05       	cpc	r25, r5
 29e:	95 05       	cpc	r25, r5
 2a0:	95 05       	cpc	r25, r5
 2a2:	95 05       	cpc	r25, r5
 2a4:	95 05       	cpc	r25, r5
 2a6:	8c 05       	cpc	r24, r12

000002a8 <__ctors_end>:
 2a8:	11 24       	eor	r1, r1
 2aa:	1f be       	out	0x3f, r1	; 63
 2ac:	cf ef       	ldi	r28, 0xFF	; 255
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df e3       	ldi	r29, 0x3F	; 63
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	00 e0       	ldi	r16, 0x00	; 0
 2b6:	0c bf       	out	0x3c, r16	; 60
 2b8:	18 be       	out	0x38, r1	; 56
 2ba:	19 be       	out	0x39, r1	; 57
 2bc:	1a be       	out	0x3a, r1	; 58
 2be:	1b be       	out	0x3b, r1	; 59

000002c0 <__do_copy_data>:
 2c0:	11 e2       	ldi	r17, 0x21	; 33
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e2       	ldi	r27, 0x20	; 32
 2c6:	e2 ef       	ldi	r30, 0xF2	; 242
 2c8:	fb e0       	ldi	r31, 0x0B	; 11
 2ca:	00 e0       	ldi	r16, 0x00	; 0
 2cc:	0b bf       	out	0x3b, r16	; 59
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__do_copy_data+0x14>
 2d0:	07 90       	elpm	r0, Z+
 2d2:	0d 92       	st	X+, r0
 2d4:	a8 33       	cpi	r26, 0x38	; 56
 2d6:	b1 07       	cpc	r27, r17
 2d8:	d9 f7       	brne	.-10     	; 0x2d0 <__do_copy_data+0x10>
 2da:	1b be       	out	0x3b, r1	; 59
 2dc:	3b d4       	rcall	.+2166   	; 0xb54 <main>
 2de:	87 c4       	rjmp	.+2318   	; 0xbee <_exit>

000002e0 <__bad_interrupt>:
 2e0:	8f ce       	rjmp	.-738    	; 0x0 <__vectors>

000002e2 <init_EBI>:
		}
    }
}

void init_EBI() {
	PORTH_DIR = 0x37;
 2e2:	87 e3       	ldi	r24, 0x37	; 55
 2e4:	80 93 e0 06 	sts	0x06E0, r24
	PORTH_OUT = 0x33;
 2e8:	83 e3       	ldi	r24, 0x33	; 51
 2ea:	80 93 e4 06 	sts	0x06E4, r24
	PORTK_DIR = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	80 93 20 07 	sts	0x0720, r24
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration
 2f4:	e0 e4       	ldi	r30, 0x40	; 64
 2f6:	f4 e0       	ldi	r31, 0x04	; 4
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 83       	st	Z, r24

	EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
 2fc:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;            // Set CS0 range to 0x004000 - 0x004FFF
 2fe:	80 e4       	ldi	r24, 0x40	; 64
 300:	82 8b       	std	Z+18, r24	; 0x12
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_4KB_gc;	    // SRAM mode, 4k address space
 302:	81 e1       	ldi	r24, 0x11	; 17
 304:	80 8b       	std	Z+16, r24	; 0x10

	// BASEADDR is 16 bit (word) register. C interface allows you to set low and high parts with 1
	// instruction instead of the previous two
	EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x1B0000 - 0x1BFFFF
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	9b e1       	ldi	r25, 0x1B	; 27
 30a:	86 8b       	std	Z+22, r24	; 0x16
 30c:	97 8b       	std	Z+23, r25	; 0x17
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;
 30e:	81 e2       	ldi	r24, 0x21	; 33
 310:	84 8b       	std	Z+20, r24	; 0x14
 312:	08 95       	ret

00000314 <k_init>:
	check_BF();
	
}

void k_init(){
	PORTF_PIN4CTRL = 0x18;
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	80 93 b4 06 	sts	0x06B4, r24
	PORTF_PIN5CTRL = 0x18;
 31a:	80 93 b5 06 	sts	0x06B5, r24
	PORTF_PIN6CTRL = 0x18;
 31e:	80 93 b6 06 	sts	0x06B6, r24
	PORTF_PIN7CTRL = 0x18;
 322:	80 93 b7 06 	sts	0x06B7, r24
	PORTF_DIRSET = 0x0F; //Low bits are outputs
 326:	8f e0       	ldi	r24, 0x0F	; 15
 328:	80 93 a1 06 	sts	0x06A1, r24
	PORTF_DIRCLR = 0xF0; //High bits are inputs
 32c:	80 ef       	ldi	r24, 0xF0	; 240
 32e:	80 93 a2 06 	sts	0x06A2, r24
 332:	08 95       	ret

00000334 <check_BF>:
}

void check_BF() {
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	1f 92       	push	r1
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t temp_val = 0;
 33e:	19 82       	std	Y+1, r1	; 0x01
	while(1) {
		temp_val = __far_mem_read(LCD_COM);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e1       	ldi	r25, 0x10	; 16
 344:	ab e1       	ldi	r26, 0x1B	; 27
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	0b b6       	in	r0, 0x3b	; 59
 34a:	ab bf       	out	0x3b, r26	; 59
 34c:	fc 01       	movw	r30, r24
 34e:	20 81       	ld	r18, Z
 350:	0b be       	out	0x3b, r0	; 59
 352:	29 83       	std	Y+1, r18	; 0x01
		if((temp_val & 0x80) == 0x00) {
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	22 23       	and	r18, r18
 358:	bc f3       	brlt	.-18     	; 0x348 <check_BF+0x14>
			break;
		}
	}
}
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <init_lcd>:
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;
}


void init_lcd() {
	check_BF();
 362:	e8 df       	rcall	.-48     	; 0x334 <check_BF>
	__far_mem_write(LCD_COM,0x38);
 364:	28 e3       	ldi	r18, 0x38	; 56
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e1       	ldi	r25, 0x10	; 16
 36a:	ab e1       	ldi	r26, 0x1B	; 27
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	0b b6       	in	r0, 0x3b	; 59
 370:	ab bf       	out	0x3b, r26	; 59
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
 376:	0b be       	out	0x3b, r0	; 59
	check_BF();
 378:	dd df       	rcall	.-70     	; 0x334 <check_BF>
	__far_mem_write(LCD_COM,0x0F);
 37a:	2f e0       	ldi	r18, 0x0F	; 15
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e1       	ldi	r25, 0x10	; 16
 380:	ab e1       	ldi	r26, 0x1B	; 27
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	0b b6       	in	r0, 0x3b	; 59
 386:	ab bf       	out	0x3b, r26	; 59
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
 38c:	0b be       	out	0x3b, r0	; 59
	check_BF();
 38e:	d2 df       	rcall	.-92     	; 0x334 <check_BF>
	__far_mem_write(LCD_COM,0x01);
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e1       	ldi	r25, 0x10	; 16
 396:	ab e1       	ldi	r26, 0x1B	; 27
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	0b b6       	in	r0, 0x3b	; 59
 39c:	ab bf       	out	0x3b, r26	; 59
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
 3a2:	0b be       	out	0x3b, r0	; 59
	check_BF();
 3a4:	c7 cf       	rjmp	.-114    	; 0x334 <check_BF>
 3a6:	08 95       	ret

000003a8 <out_string>:
			break;
		}
	}
}

void out_string(char *str){
 3a8:	7f 92       	push	r7
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	ec 01       	movw	r28, r24
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
 3c4:	88 81       	ld	r24, Y
 3c6:	81 11       	cpse	r24, r1
 3c8:	19 c0       	rjmp	.+50     	; 0x3fc <out_string+0x54>
 3ca:	16 c0       	rjmp	.+44     	; 0x3f8 <out_string+0x50>
		check_BF();
 3cc:	b3 df       	rcall	.-154    	; 0x334 <check_BF>
		//go to the next line when ends the line
		if(cntr == 16)
 3ce:	00 31       	cpi	r16, 0x10	; 16
 3d0:	11 05       	cpc	r17, r1
 3d2:	31 f4       	brne	.+12     	; 0x3e0 <out_string+0x38>
		{
			__far_mem_write(LCD_COM, 0xC0);
 3d4:	0b b6       	in	r0, 0x3b	; 59
 3d6:	ab be       	out	0x3b, r10	; 59
 3d8:	f4 01       	movw	r30, r8
 3da:	70 82       	st	Z, r7
 3dc:	0b be       	out	0x3b, r0	; 59
			check_BF();
 3de:	aa df       	rcall	.-172    	; 0x334 <check_BF>
		}
		check_BF();
 3e0:	a9 df       	rcall	.-174    	; 0x334 <check_BF>
		__far_mem_write(LCD_DAT,*str);
 3e2:	89 91       	ld	r24, Y+
 3e4:	0b b6       	in	r0, 0x3b	; 59
 3e6:	eb be       	out	0x3b, r14	; 59
 3e8:	f6 01       	movw	r30, r12
 3ea:	80 83       	st	Z, r24
 3ec:	0b be       	out	0x3b, r0	; 59
		str++;
		cntr++;
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
}

void out_string(char *str){
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
 3f2:	88 81       	ld	r24, Y
 3f4:	81 11       	cpse	r24, r1
 3f6:	ea cf       	rjmp	.-44     	; 0x3cc <out_string+0x24>
		check_BF();
		__far_mem_write(LCD_DAT,*str);
		str++;
		cntr++;
	}
	check_BF();
 3f8:	9d df       	rcall	.-198    	; 0x334 <check_BF>
 3fa:	19 c0       	rjmp	.+50     	; 0x42e <out_string+0x86>

void out_string(char *str){
	int cntr = 0;
	//go through each char until null
	while(*str!= 0) {
		check_BF();
 3fc:	9b df       	rcall	.-202    	; 0x334 <check_BF>
		}
	}
}

void out_string(char *str){
	int cntr = 0;
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	10 e0       	ldi	r17, 0x00	; 0
		{
			__far_mem_write(LCD_COM, 0xC0);
			check_BF();
		}
		check_BF();
		__far_mem_write(LCD_DAT,*str);
 402:	0f 2e       	mov	r0, r31
 404:	cc 24       	eor	r12, r12
 406:	c3 94       	inc	r12
 408:	f0 e1       	ldi	r31, 0x10	; 16
 40a:	df 2e       	mov	r13, r31
 40c:	fb e1       	ldi	r31, 0x1B	; 27
 40e:	ef 2e       	mov	r14, r31
 410:	f1 2c       	mov	r15, r1
 412:	f0 2d       	mov	r31, r0
	while(*str!= 0) {
		check_BF();
		//go to the next line when ends the line
		if(cntr == 16)
		{
			__far_mem_write(LCD_COM, 0xC0);
 414:	0f 2e       	mov	r0, r31
 416:	81 2c       	mov	r8, r1
 418:	f0 e1       	ldi	r31, 0x10	; 16
 41a:	9f 2e       	mov	r9, r31
 41c:	fb e1       	ldi	r31, 0x1B	; 27
 41e:	af 2e       	mov	r10, r31
 420:	b1 2c       	mov	r11, r1
 422:	f0 2d       	mov	r31, r0
 424:	0f 2e       	mov	r0, r31
 426:	f0 ec       	ldi	r31, 0xC0	; 192
 428:	7f 2e       	mov	r7, r31
 42a:	f0 2d       	mov	r31, r0
 42c:	d9 cf       	rjmp	.-78     	; 0x3e0 <out_string+0x38>
		__far_mem_write(LCD_DAT,*str);
		str++;
		cntr++;
	}
	check_BF();
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	df 90       	pop	r13
 43c:	cf 90       	pop	r12
 43e:	bf 90       	pop	r11
 440:	af 90       	pop	r10
 442:	9f 90       	pop	r9
 444:	8f 90       	pop	r8
 446:	7f 90       	pop	r7
 448:	08 95       	ret

0000044a <init_timer>:

void init_timer() {
	TCE1.CTRLA = 0x05;
 44a:	e0 e4       	ldi	r30, 0x40	; 64
 44c:	fa e0       	ldi	r31, 0x0A	; 10
 44e:	85 e0       	ldi	r24, 0x05	; 5
 450:	80 83       	st	Z, r24
	TCE1.CTRLB = 0x10;
 452:	80 e1       	ldi	r24, 0x10	; 16
 454:	81 83       	std	Z+1, r24	; 0x01
	TCE1.INTCTRLA = 0x02;
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	86 83       	std	Z+6, r24	; 0x06
	TCE1.INTCTRLB = 0x00;
 45a:	17 82       	std	Z+7, r1	; 0x07
	
	PMIC_CTRL = 0x02;
 45c:	80 93 a2 00 	sts	0x00A2, r24
	
	sei();
 460:	78 94       	sei
 462:	08 95       	ret

00000464 <init_SP>:
}

void init_SP() {
	PORTE.DIRSET = 0x01;	//making portE pin2 as an output
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	e0 e8       	ldi	r30, 0x80	; 128
 468:	f6 e0       	ldi	r31, 0x06	; 6
 46a:	81 83       	std	Z+1, r24	; 0x01
	TCE0_CNT = 0x00;		//this is where the count is stored, we are resetting it. (CNT=PER)
 46c:	10 92 20 0a 	sts	0x0A20, r1
 470:	10 92 21 0a 	sts	0x0A21, r1
	TCE0_CTRLA = 0x00;		//setting clk to on
 474:	10 92 00 0a 	sts	0x0A00, r1
	TCE0_CTRLB = 0x11;		//enables CCA (FRQ mode, see 14.8.2), frequency mode
 478:	81 e1       	ldi	r24, 0x11	; 17
 47a:	80 93 01 0a 	sts	0x0A01, r24
 47e:	08 95       	ret

00000480 <soundStop>:
}

void soundStop(int num) {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
	TCE1.CNT = 0x00;
 484:	e0 e4       	ldi	r30, 0x40	; 64
 486:	fa e0       	ldi	r31, 0x0A	; 10
 488:	10 a2       	std	Z+32, r1	; 0x20
 48a:	11 a2       	std	Z+33, r1	; 0x21
	TCE1.PER = num;
 48c:	86 a3       	std	Z+38, r24	; 0x26
 48e:	97 a3       	std	Z+39, r25	; 0x27
	//Setting the PER depending on the time passed in
	while (TCE1.PER > TCE1.CNT)
 490:	26 a1       	ldd	r18, Z+38	; 0x26
 492:	37 a1       	ldd	r19, Z+39	; 0x27
 494:	80 a1       	ldd	r24, Z+32	; 0x20
 496:	91 a1       	ldd	r25, Z+33	; 0x21
 498:	82 17       	cp	r24, r18
 49a:	93 07       	cpc	r25, r19
 49c:	98 f4       	brcc	.+38     	; 0x4c4 <soundStop+0x44>
	{
		//TCE0.CTRLA = 0x01;
		__far_mem_write(0x4000, 0x01);
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e4       	ldi	r25, 0x40	; 64
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	61 e0       	ldi	r22, 0x01	; 1

void soundStop(int num) {
	TCE1.CNT = 0x00;
	TCE1.PER = num;
	//Setting the PER depending on the time passed in
	while (TCE1.PER > TCE1.CNT)
 4a8:	c0 e4       	ldi	r28, 0x40	; 64
 4aa:	da e0       	ldi	r29, 0x0A	; 10
	{
		//TCE0.CTRLA = 0x01;
		__far_mem_write(0x4000, 0x01);
 4ac:	0b b6       	in	r0, 0x3b	; 59
 4ae:	ab bf       	out	0x3b, r26	; 59
 4b0:	fc 01       	movw	r30, r24
 4b2:	60 83       	st	Z, r22
 4b4:	0b be       	out	0x3b, r0	; 59

void soundStop(int num) {
	TCE1.CNT = 0x00;
	TCE1.PER = num;
	//Setting the PER depending on the time passed in
	while (TCE1.PER > TCE1.CNT)
 4b6:	4e a1       	ldd	r20, Y+38	; 0x26
 4b8:	5f a1       	ldd	r21, Y+39	; 0x27
 4ba:	28 a1       	ldd	r18, Y+32	; 0x20
 4bc:	39 a1       	ldd	r19, Y+33	; 0x21
 4be:	24 17       	cp	r18, r20
 4c0:	35 07       	cpc	r19, r21
 4c2:	a0 f3       	brcs	.-24     	; 0x4ac <soundStop+0x2c>
	{
		//TCE0.CTRLA = 0x01;
		__far_mem_write(0x4000, 0x01);
	}
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <__vector_53>:

//Interrupt for the timer
ISR(TCE1_OVF_vect) {	
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	08 b6       	in	r0, 0x38	; 56
 4d6:	0f 92       	push	r0
 4d8:	18 be       	out	0x38, r1	; 56
 4da:	09 b6       	in	r0, 0x39	; 57
 4dc:	0f 92       	push	r0
 4de:	19 be       	out	0x39, r1	; 57
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	1b be       	out	0x3b, r1	; 59
 4e6:	2f 93       	push	r18
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	//TCE0.CTRLA = 0x00;
	__far_mem_write(0x4000, 0x00);
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e4       	ldi	r25, 0x40	; 64
 4fa:	a0 e0       	ldi	r26, 0x00	; 0
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	0b b6       	in	r0, 0x3b	; 59
 500:	ab bf       	out	0x3b, r26	; 59
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
 506:	0b be       	out	0x3b, r0	; 59
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	09 be       	out	0x39, r0	; 57
 51e:	0f 90       	pop	r0
 520:	08 be       	out	0x38, r0	; 56
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <get_key>:


//Keypad
char get_key(){
	uint8_t key;
	PORTF_OUT = 0x0E;
 52c:	8e e0       	ldi	r24, 0x0E	; 14
 52e:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 532:	00 00       	nop
	key = PORTF_IN;
 534:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xEE){
 538:	8e 3e       	cpi	r24, 0xEE	; 238
 53a:	91 f1       	breq	.+100    	; 0x5a0 <get_key+0x74>
		return '1';
	}
	if(key == 0xDE){
 53c:	8e 3d       	cpi	r24, 0xDE	; 222
 53e:	91 f1       	breq	.+100    	; 0x5a4 <get_key+0x78>
		return '4'; 
	}
	if(key == 0xBE){
 540:	8e 3b       	cpi	r24, 0xBE	; 190
 542:	91 f1       	breq	.+100    	; 0x5a8 <get_key+0x7c>
		return '7';
	}
	if(key == 0x7E){
 544:	8e 37       	cpi	r24, 0x7E	; 126
 546:	91 f1       	breq	.+100    	; 0x5ac <get_key+0x80>
		return '*'; 
	}
	
	PORTF_OUT = 0x0D;
 548:	8d e0       	ldi	r24, 0x0D	; 13
 54a:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 54e:	00 00       	nop
	key = PORTF_IN;
 550:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xED){
 554:	8d 3e       	cpi	r24, 0xED	; 237
 556:	61 f1       	breq	.+88     	; 0x5b0 <get_key+0x84>
		return '2'; 
	}
	if(key == 0xDD){
 558:	8d 3d       	cpi	r24, 0xDD	; 221
 55a:	61 f1       	breq	.+88     	; 0x5b4 <get_key+0x88>
		return '5';
	}
	if(key == 0xBD){
 55c:	8d 3b       	cpi	r24, 0xBD	; 189
 55e:	61 f1       	breq	.+88     	; 0x5b8 <get_key+0x8c>
		return '8'; 
	}
	if(key == 0x7D){
 560:	8d 37       	cpi	r24, 0x7D	; 125
 562:	61 f1       	breq	.+88     	; 0x5bc <get_key+0x90>
		return '0'; 
	}
	PORTF_OUT = 0x0B;
 564:	8b e0       	ldi	r24, 0x0B	; 11
 566:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 56a:	00 00       	nop
	key = PORTF_IN;
 56c:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xEB){
 570:	8b 3e       	cpi	r24, 0xEB	; 235
 572:	31 f1       	breq	.+76     	; 0x5c0 <get_key+0x94>
		return '3';
	}
	if(key == 0xDB){
 574:	8b 3d       	cpi	r24, 0xDB	; 219
 576:	31 f1       	breq	.+76     	; 0x5c4 <get_key+0x98>
		return '6'; 
	}
	if(key == 0xBB){
 578:	8b 3b       	cpi	r24, 0xBB	; 187
 57a:	31 f1       	breq	.+76     	; 0x5c8 <get_key+0x9c>
		return '9'; 
	}
	if(key == 0x7B){
 57c:	8b 37       	cpi	r24, 0x7B	; 123
 57e:	31 f1       	breq	.+76     	; 0x5cc <get_key+0xa0>
		return '#';
	}
	PORTF_OUT = 0x07;
 580:	87 e0       	ldi	r24, 0x07	; 7
 582:	80 93 a4 06 	sts	0x06A4, r24
	asm("nop");
 586:	00 00       	nop
	key = PORTF_IN;
 588:	80 91 a8 06 	lds	r24, 0x06A8
	if(key == 0xE7){
 58c:	87 3e       	cpi	r24, 0xE7	; 231
 58e:	01 f1       	breq	.+64     	; 0x5d0 <get_key+0xa4>
		return 'A'; 
	}
	if(key == 0xD7){
 590:	87 3d       	cpi	r24, 0xD7	; 215
 592:	01 f1       	breq	.+64     	; 0x5d4 <get_key+0xa8>
		return 'B'; 
	}
	if(key == 0xB7){
 594:	87 3b       	cpi	r24, 0xB7	; 183
 596:	01 f1       	breq	.+64     	; 0x5d8 <get_key+0xac>
		return 'C'; 
	}
	if(key == 0x77){
 598:	87 37       	cpi	r24, 0x77	; 119
 59a:	01 f5       	brne	.+64     	; 0x5dc <get_key+0xb0>
		return 'D';
 59c:	84 e4       	ldi	r24, 0x44	; 68
 59e:	08 95       	ret
	uint8_t key;
	PORTF_OUT = 0x0E;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xEE){
		return '1';
 5a0:	81 e3       	ldi	r24, 0x31	; 49
 5a2:	08 95       	ret
	}
	if(key == 0xDE){
		return '4'; 
 5a4:	84 e3       	ldi	r24, 0x34	; 52
 5a6:	08 95       	ret
	}
	if(key == 0xBE){
		return '7';
 5a8:	87 e3       	ldi	r24, 0x37	; 55
 5aa:	08 95       	ret
	}
	if(key == 0x7E){
		return '*'; 
 5ac:	8a e2       	ldi	r24, 0x2A	; 42
 5ae:	08 95       	ret
	
	PORTF_OUT = 0x0D;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xED){
		return '2'; 
 5b0:	82 e3       	ldi	r24, 0x32	; 50
 5b2:	08 95       	ret
	}
	if(key == 0xDD){
		return '5';
 5b4:	85 e3       	ldi	r24, 0x35	; 53
 5b6:	08 95       	ret
	}
	if(key == 0xBD){
		return '8'; 
 5b8:	88 e3       	ldi	r24, 0x38	; 56
 5ba:	08 95       	ret
	}
	if(key == 0x7D){
		return '0'; 
 5bc:	80 e3       	ldi	r24, 0x30	; 48
 5be:	08 95       	ret
	}
	PORTF_OUT = 0x0B;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xEB){
		return '3';
 5c0:	83 e3       	ldi	r24, 0x33	; 51
 5c2:	08 95       	ret
	}
	if(key == 0xDB){
		return '6'; 
 5c4:	86 e3       	ldi	r24, 0x36	; 54
 5c6:	08 95       	ret
	}
	if(key == 0xBB){
		return '9'; 
 5c8:	89 e3       	ldi	r24, 0x39	; 57
 5ca:	08 95       	ret
	}
	if(key == 0x7B){
		return '#';
 5cc:	83 e2       	ldi	r24, 0x23	; 35
 5ce:	08 95       	ret
	}
	PORTF_OUT = 0x07;
	asm("nop");
	key = PORTF_IN;
	if(key == 0xE7){
		return 'A'; 
 5d0:	81 e4       	ldi	r24, 0x41	; 65
 5d2:	08 95       	ret
	}
	if(key == 0xD7){
		return 'B'; 
 5d4:	82 e4       	ldi	r24, 0x42	; 66
 5d6:	08 95       	ret
	}
	if(key == 0xB7){
		return 'C'; 
 5d8:	83 e4       	ldi	r24, 0x43	; 67
 5da:	08 95       	ret
	}
	if(key == 0x77){
		return 'D';
	}
	
	return '&';
 5dc:	86 e2       	ldi	r24, 0x26	; 38
}
 5de:	08 95       	ret

000005e0 <noise>:

void noise(char note) {
	int timenote = 15000;
	//Display on the lcd and make the noise
	switch (note)
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	fc 01       	movw	r30, r24
 5e4:	f0 97       	sbiw	r30, 0x30	; 48
 5e6:	e5 31       	cpi	r30, 0x15	; 21
 5e8:	f1 05       	cpc	r31, r1
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <noise+0xe>
 5ec:	0a c2       	rjmp	.+1044   	; 0xa02 <noise+0x422>
 5ee:	e2 50       	subi	r30, 0x02	; 2
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	f7 c2       	rjmp	.+1518   	; 0xbe2 <__tablejump2__>
	{
		delay();
		case '1':
			//TCE0.CCA = 0x3C1; //1046.50
			__far_mem_write(LCD_COM, 0x01);
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e1       	ldi	r25, 0x10	; 16
 5fa:	ab e1       	ldi	r26, 0x1B	; 27
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	0b b6       	in	r0, 0x3b	; 59
 600:	ab bf       	out	0x3b, r26	; 59
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
 606:	0b be       	out	0x3b, r0	; 59
			check_BF();
 608:	95 de       	rcall	.-726    	; 0x334 <check_BF>
			out_string("C6");
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e2       	ldi	r25, 0x20	; 32
 60e:	cc de       	rcall	.-616    	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 610:	20 ec       	ldi	r18, 0xC0	; 192
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e1       	ldi	r25, 0x10	; 16
 616:	ab e1       	ldi	r26, 0x1B	; 27
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	0b b6       	in	r0, 0x3b	; 59
 61c:	ab bf       	out	0x3b, r26	; 59
 61e:	fc 01       	movw	r30, r24
 620:	20 83       	st	Z, r18
 622:	0b be       	out	0x3b, r0	; 59
			check_BF();
 624:	87 de       	rcall	.-754    	; 0x334 <check_BF>
			out_string("1046.50 Hz");
 626:	83 e0       	ldi	r24, 0x03	; 3
 628:	90 e2       	ldi	r25, 0x20	; 32
 62a:	be de       	rcall	.-644    	; 0x3a8 <out_string>
			soundStop(45000);
 62c:	88 ec       	ldi	r24, 0xC8	; 200
 62e:	9f ea       	ldi	r25, 0xAF	; 175
 630:	27 cf       	rjmp	.-434    	; 0x480 <soundStop>
			break;
 632:	08 95       	ret
		case '2':
			//TCE0.CCA = 0x38B; //1108.73
			__far_mem_write(LCD_COM, 0x01);
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e1       	ldi	r25, 0x10	; 16
 63a:	ab e1       	ldi	r26, 0x1B	; 27
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	0b b6       	in	r0, 0x3b	; 59
 640:	ab bf       	out	0x3b, r26	; 59
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18
 646:	0b be       	out	0x3b, r0	; 59
			check_BF();
 648:	75 de       	rcall	.-790    	; 0x334 <check_BF>
			out_string("C#6/Db6");
 64a:	8e e0       	ldi	r24, 0x0E	; 14
 64c:	90 e2       	ldi	r25, 0x20	; 32
 64e:	ac de       	rcall	.-680    	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 650:	20 ec       	ldi	r18, 0xC0	; 192
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e1       	ldi	r25, 0x10	; 16
 656:	ab e1       	ldi	r26, 0x1B	; 27
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	0b b6       	in	r0, 0x3b	; 59
 65c:	ab bf       	out	0x3b, r26	; 59
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
 662:	0b be       	out	0x3b, r0	; 59
			check_BF();
 664:	67 de       	rcall	.-818    	; 0x334 <check_BF>
			out_string("1108.73 Hz");
 666:	86 e1       	ldi	r24, 0x16	; 22
 668:	90 e2       	ldi	r25, 0x20	; 32
 66a:	9e de       	rcall	.-708    	; 0x3a8 <out_string>
			soundStop(15000);
 66c:	88 e9       	ldi	r24, 0x98	; 152
 66e:	9a e3       	ldi	r25, 0x3A	; 58
 670:	07 cf       	rjmp	.-498    	; 0x480 <soundStop>
			break;
 672:	08 95       	ret
		case '3':
			TCE0.CCA = 0x358; //1174.66
 674:	88 e5       	ldi	r24, 0x58	; 88
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	e0 e0       	ldi	r30, 0x00	; 0
 67a:	fa e0       	ldi	r31, 0x0A	; 10
 67c:	80 a7       	std	Z+40, r24	; 0x28
 67e:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 680:	21 e0       	ldi	r18, 0x01	; 1
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e1       	ldi	r25, 0x10	; 16
 686:	ab e1       	ldi	r26, 0x1B	; 27
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	0b b6       	in	r0, 0x3b	; 59
 68c:	ab bf       	out	0x3b, r26	; 59
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
 692:	0b be       	out	0x3b, r0	; 59
			check_BF();
 694:	4f de       	rcall	.-866    	; 0x334 <check_BF>
			out_string("D6");
 696:	81 e2       	ldi	r24, 0x21	; 33
 698:	90 e2       	ldi	r25, 0x20	; 32
 69a:	86 de       	rcall	.-756    	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 69c:	20 ec       	ldi	r18, 0xC0	; 192
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e1       	ldi	r25, 0x10	; 16
 6a2:	ab e1       	ldi	r26, 0x1B	; 27
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	0b b6       	in	r0, 0x3b	; 59
 6a8:	ab bf       	out	0x3b, r26	; 59
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18
 6ae:	0b be       	out	0x3b, r0	; 59
			check_BF();
 6b0:	41 de       	rcall	.-894    	; 0x334 <check_BF>
			out_string("1174.66 Hz");
 6b2:	84 e2       	ldi	r24, 0x24	; 36
 6b4:	90 e2       	ldi	r25, 0x20	; 32
 6b6:	78 de       	rcall	.-784    	; 0x3a8 <out_string>
			soundStop(timenote);
 6b8:	88 e9       	ldi	r24, 0x98	; 152
 6ba:	9a e3       	ldi	r25, 0x3A	; 58
 6bc:	e1 ce       	rjmp	.-574    	; 0x480 <soundStop>
			break;
 6be:	08 95       	ret
		case '4':
			TCE0.CCA = 0x328; //1244.51
 6c0:	88 e2       	ldi	r24, 0x28	; 40
 6c2:	93 e0       	ldi	r25, 0x03	; 3
 6c4:	e0 e0       	ldi	r30, 0x00	; 0
 6c6:	fa e0       	ldi	r31, 0x0A	; 10
 6c8:	80 a7       	std	Z+40, r24	; 0x28
 6ca:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 6cc:	21 e0       	ldi	r18, 0x01	; 1
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e1       	ldi	r25, 0x10	; 16
 6d2:	ab e1       	ldi	r26, 0x1B	; 27
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	0b b6       	in	r0, 0x3b	; 59
 6d8:	ab bf       	out	0x3b, r26	; 59
 6da:	fc 01       	movw	r30, r24
 6dc:	20 83       	st	Z, r18
 6de:	0b be       	out	0x3b, r0	; 59
			check_BF();
 6e0:	29 de       	rcall	.-942    	; 0x334 <check_BF>
			out_string("D#6/Eb6");
 6e2:	8f e2       	ldi	r24, 0x2F	; 47
 6e4:	90 e2       	ldi	r25, 0x20	; 32
 6e6:	60 de       	rcall	.-832    	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 6e8:	20 ec       	ldi	r18, 0xC0	; 192
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e1       	ldi	r25, 0x10	; 16
 6ee:	ab e1       	ldi	r26, 0x1B	; 27
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	0b b6       	in	r0, 0x3b	; 59
 6f4:	ab bf       	out	0x3b, r26	; 59
 6f6:	fc 01       	movw	r30, r24
 6f8:	20 83       	st	Z, r18
 6fa:	0b be       	out	0x3b, r0	; 59
			check_BF();
 6fc:	1b de       	rcall	.-970    	; 0x334 <check_BF>
			out_string("1244.51 Hz");
 6fe:	87 e3       	ldi	r24, 0x37	; 55
 700:	90 e2       	ldi	r25, 0x20	; 32
 702:	52 de       	rcall	.-860    	; 0x3a8 <out_string>
			soundStop(timenote);
 704:	88 e9       	ldi	r24, 0x98	; 152
 706:	9a e3       	ldi	r25, 0x3A	; 58
 708:	bb ce       	rjmp	.-650    	; 0x480 <soundStop>
			break;
 70a:	08 95       	ret
		case '5':
			TCE0.CCA = 0x2FA; //1318.51
 70c:	8a ef       	ldi	r24, 0xFA	; 250
 70e:	92 e0       	ldi	r25, 0x02	; 2
 710:	e0 e0       	ldi	r30, 0x00	; 0
 712:	fa e0       	ldi	r31, 0x0A	; 10
 714:	80 a7       	std	Z+40, r24	; 0x28
 716:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 718:	21 e0       	ldi	r18, 0x01	; 1
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e1       	ldi	r25, 0x10	; 16
 71e:	ab e1       	ldi	r26, 0x1B	; 27
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	0b b6       	in	r0, 0x3b	; 59
 724:	ab bf       	out	0x3b, r26	; 59
 726:	fc 01       	movw	r30, r24
 728:	20 83       	st	Z, r18
 72a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 72c:	03 de       	rcall	.-1018   	; 0x334 <check_BF>
			out_string("E6");
 72e:	82 e4       	ldi	r24, 0x42	; 66
 730:	90 e2       	ldi	r25, 0x20	; 32
 732:	3a de       	rcall	.-908    	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 734:	20 ec       	ldi	r18, 0xC0	; 192
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e1       	ldi	r25, 0x10	; 16
 73a:	ab e1       	ldi	r26, 0x1B	; 27
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	0b b6       	in	r0, 0x3b	; 59
 740:	ab bf       	out	0x3b, r26	; 59
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
 746:	0b be       	out	0x3b, r0	; 59
			check_BF();
 748:	f5 dd       	rcall	.-1046   	; 0x334 <check_BF>
			out_string("1318.51 Hz");
 74a:	85 e4       	ldi	r24, 0x45	; 69
 74c:	90 e2       	ldi	r25, 0x20	; 32
 74e:	2c de       	rcall	.-936    	; 0x3a8 <out_string>
			soundStop(timenote);
 750:	88 e9       	ldi	r24, 0x98	; 152
 752:	9a e3       	ldi	r25, 0x3A	; 58
 754:	95 ce       	rjmp	.-726    	; 0x480 <soundStop>
			break;
 756:	08 95       	ret
		case '6':
			TCE0.CCA = 0x2D0; //1396.91
 758:	80 ed       	ldi	r24, 0xD0	; 208
 75a:	92 e0       	ldi	r25, 0x02	; 2
 75c:	e0 e0       	ldi	r30, 0x00	; 0
 75e:	fa e0       	ldi	r31, 0x0A	; 10
 760:	80 a7       	std	Z+40, r24	; 0x28
 762:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 764:	21 e0       	ldi	r18, 0x01	; 1
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e1       	ldi	r25, 0x10	; 16
 76a:	ab e1       	ldi	r26, 0x1B	; 27
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	0b b6       	in	r0, 0x3b	; 59
 770:	ab bf       	out	0x3b, r26	; 59
 772:	fc 01       	movw	r30, r24
 774:	20 83       	st	Z, r18
 776:	0b be       	out	0x3b, r0	; 59
			check_BF();
 778:	dd dd       	rcall	.-1094   	; 0x334 <check_BF>
			out_string("F6");
 77a:	80 e5       	ldi	r24, 0x50	; 80
 77c:	90 e2       	ldi	r25, 0x20	; 32
 77e:	14 de       	rcall	.-984    	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 780:	20 ec       	ldi	r18, 0xC0	; 192
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	90 e1       	ldi	r25, 0x10	; 16
 786:	ab e1       	ldi	r26, 0x1B	; 27
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	0b b6       	in	r0, 0x3b	; 59
 78c:	ab bf       	out	0x3b, r26	; 59
 78e:	fc 01       	movw	r30, r24
 790:	20 83       	st	Z, r18
 792:	0b be       	out	0x3b, r0	; 59
			check_BF();
 794:	cf dd       	rcall	.-1122   	; 0x334 <check_BF>
			out_string("1396.98 Hz");
 796:	83 e5       	ldi	r24, 0x53	; 83
 798:	90 e2       	ldi	r25, 0x20	; 32
 79a:	06 de       	rcall	.-1012   	; 0x3a8 <out_string>
			soundStop(timenote);
 79c:	88 e9       	ldi	r24, 0x98	; 152
 79e:	9a e3       	ldi	r25, 0x3A	; 58
 7a0:	6f ce       	rjmp	.-802    	; 0x480 <soundStop>
			break;
 7a2:	08 95       	ret
		case '7':
			TCE0.CCA = 0x2A7; //1479.98
 7a4:	87 ea       	ldi	r24, 0xA7	; 167
 7a6:	92 e0       	ldi	r25, 0x02	; 2
 7a8:	e0 e0       	ldi	r30, 0x00	; 0
 7aa:	fa e0       	ldi	r31, 0x0A	; 10
 7ac:	80 a7       	std	Z+40, r24	; 0x28
 7ae:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 7b0:	21 e0       	ldi	r18, 0x01	; 1
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e1       	ldi	r25, 0x10	; 16
 7b6:	ab e1       	ldi	r26, 0x1B	; 27
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	0b b6       	in	r0, 0x3b	; 59
 7bc:	ab bf       	out	0x3b, r26	; 59
 7be:	fc 01       	movw	r30, r24
 7c0:	20 83       	st	Z, r18
 7c2:	0b be       	out	0x3b, r0	; 59
			check_BF();
 7c4:	b7 dd       	rcall	.-1170   	; 0x334 <check_BF>
			out_string("F#6/Gb6");
 7c6:	8e e5       	ldi	r24, 0x5E	; 94
 7c8:	90 e2       	ldi	r25, 0x20	; 32
 7ca:	ee dd       	rcall	.-1060   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 7cc:	20 ec       	ldi	r18, 0xC0	; 192
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e1       	ldi	r25, 0x10	; 16
 7d2:	ab e1       	ldi	r26, 0x1B	; 27
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	0b b6       	in	r0, 0x3b	; 59
 7d8:	ab bf       	out	0x3b, r26	; 59
 7da:	fc 01       	movw	r30, r24
 7dc:	20 83       	st	Z, r18
 7de:	0b be       	out	0x3b, r0	; 59
			check_BF();
 7e0:	a9 dd       	rcall	.-1198   	; 0x334 <check_BF>
			out_string("1479.98 Hz");
 7e2:	86 e6       	ldi	r24, 0x66	; 102
 7e4:	90 e2       	ldi	r25, 0x20	; 32
 7e6:	e0 dd       	rcall	.-1088   	; 0x3a8 <out_string>
			soundStop(timenote);
 7e8:	88 e9       	ldi	r24, 0x98	; 152
 7ea:	9a e3       	ldi	r25, 0x3A	; 58
 7ec:	49 ce       	rjmp	.-878    	; 0x480 <soundStop>
			break;
 7ee:	08 95       	ret
		case '8':
			TCE0.CCA = 0x281; //1567.98
 7f0:	81 e8       	ldi	r24, 0x81	; 129
 7f2:	92 e0       	ldi	r25, 0x02	; 2
 7f4:	e0 e0       	ldi	r30, 0x00	; 0
 7f6:	fa e0       	ldi	r31, 0x0A	; 10
 7f8:	80 a7       	std	Z+40, r24	; 0x28
 7fa:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 7fc:	21 e0       	ldi	r18, 0x01	; 1
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e1       	ldi	r25, 0x10	; 16
 802:	ab e1       	ldi	r26, 0x1B	; 27
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	0b b6       	in	r0, 0x3b	; 59
 808:	ab bf       	out	0x3b, r26	; 59
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
 80e:	0b be       	out	0x3b, r0	; 59
			check_BF();
 810:	91 dd       	rcall	.-1246   	; 0x334 <check_BF>
			out_string("G6");
 812:	81 e7       	ldi	r24, 0x71	; 113
 814:	90 e2       	ldi	r25, 0x20	; 32
 816:	c8 dd       	rcall	.-1136   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 818:	20 ec       	ldi	r18, 0xC0	; 192
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e1       	ldi	r25, 0x10	; 16
 81e:	ab e1       	ldi	r26, 0x1B	; 27
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	0b b6       	in	r0, 0x3b	; 59
 824:	ab bf       	out	0x3b, r26	; 59
 826:	fc 01       	movw	r30, r24
 828:	20 83       	st	Z, r18
 82a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 82c:	83 dd       	rcall	.-1274   	; 0x334 <check_BF>
			out_string("1567.98 Hz");
 82e:	84 e7       	ldi	r24, 0x74	; 116
 830:	90 e2       	ldi	r25, 0x20	; 32
 832:	ba dd       	rcall	.-1164   	; 0x3a8 <out_string>
			soundStop(timenote);
 834:	88 e9       	ldi	r24, 0x98	; 152
 836:	9a e3       	ldi	r25, 0x3A	; 58
 838:	23 ce       	rjmp	.-954    	; 0x480 <soundStop>
			break;
 83a:	08 95       	ret
		case '9':
			TCE0.CCA = 0x25D; //1661.22
 83c:	8d e5       	ldi	r24, 0x5D	; 93
 83e:	92 e0       	ldi	r25, 0x02	; 2
 840:	e0 e0       	ldi	r30, 0x00	; 0
 842:	fa e0       	ldi	r31, 0x0A	; 10
 844:	80 a7       	std	Z+40, r24	; 0x28
 846:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 848:	21 e0       	ldi	r18, 0x01	; 1
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e1       	ldi	r25, 0x10	; 16
 84e:	ab e1       	ldi	r26, 0x1B	; 27
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	0b b6       	in	r0, 0x3b	; 59
 854:	ab bf       	out	0x3b, r26	; 59
 856:	fc 01       	movw	r30, r24
 858:	20 83       	st	Z, r18
 85a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 85c:	6b dd       	rcall	.-1322   	; 0x334 <check_BF>
			out_string("G#6/Ab6");
 85e:	8f e7       	ldi	r24, 0x7F	; 127
 860:	90 e2       	ldi	r25, 0x20	; 32
 862:	a2 dd       	rcall	.-1212   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 864:	20 ec       	ldi	r18, 0xC0	; 192
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e1       	ldi	r25, 0x10	; 16
 86a:	ab e1       	ldi	r26, 0x1B	; 27
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	0b b6       	in	r0, 0x3b	; 59
 870:	ab bf       	out	0x3b, r26	; 59
 872:	fc 01       	movw	r30, r24
 874:	20 83       	st	Z, r18
 876:	0b be       	out	0x3b, r0	; 59
			check_BF();
 878:	5d dd       	rcall	.-1350   	; 0x334 <check_BF>
			out_string("1661.22 Hz");
 87a:	87 e8       	ldi	r24, 0x87	; 135
 87c:	90 e2       	ldi	r25, 0x20	; 32
 87e:	94 dd       	rcall	.-1240   	; 0x3a8 <out_string>
			soundStop(timenote);
 880:	88 e9       	ldi	r24, 0x98	; 152
 882:	9a e3       	ldi	r25, 0x3A	; 58
 884:	fd cd       	rjmp	.-1030   	; 0x480 <soundStop>
			break;
 886:	08 95       	ret
		case '0':
			TCE0.CCA = 0x23C; //1760.00
 888:	8c e3       	ldi	r24, 0x3C	; 60
 88a:	92 e0       	ldi	r25, 0x02	; 2
 88c:	e0 e0       	ldi	r30, 0x00	; 0
 88e:	fa e0       	ldi	r31, 0x0A	; 10
 890:	80 a7       	std	Z+40, r24	; 0x28
 892:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e1       	ldi	r25, 0x10	; 16
 89a:	ab e1       	ldi	r26, 0x1B	; 27
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	0b b6       	in	r0, 0x3b	; 59
 8a0:	ab bf       	out	0x3b, r26	; 59
 8a2:	fc 01       	movw	r30, r24
 8a4:	20 83       	st	Z, r18
 8a6:	0b be       	out	0x3b, r0	; 59
			check_BF();
 8a8:	45 dd       	rcall	.-1398   	; 0x334 <check_BF>
			out_string("A6");
 8aa:	82 e9       	ldi	r24, 0x92	; 146
 8ac:	90 e2       	ldi	r25, 0x20	; 32
 8ae:	7c dd       	rcall	.-1288   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 8b0:	20 ec       	ldi	r18, 0xC0	; 192
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e1       	ldi	r25, 0x10	; 16
 8b6:	ab e1       	ldi	r26, 0x1B	; 27
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	0b b6       	in	r0, 0x3b	; 59
 8bc:	ab bf       	out	0x3b, r26	; 59
 8be:	fc 01       	movw	r30, r24
 8c0:	20 83       	st	Z, r18
 8c2:	0b be       	out	0x3b, r0	; 59
			check_BF();
 8c4:	37 dd       	rcall	.-1426   	; 0x334 <check_BF>
			out_string("1760.00 Hz");
 8c6:	85 e9       	ldi	r24, 0x95	; 149
 8c8:	90 e2       	ldi	r25, 0x20	; 32
 8ca:	6e dd       	rcall	.-1316   	; 0x3a8 <out_string>
			soundStop(timenote);
 8cc:	88 e9       	ldi	r24, 0x98	; 152
 8ce:	9a e3       	ldi	r25, 0x3A	; 58
 8d0:	d7 cd       	rjmp	.-1106   	; 0x480 <soundStop>
			break;
 8d2:	08 95       	ret
		case 'A':
			TCE0.CCA = 0x21B; //1864.66
 8d4:	8b e1       	ldi	r24, 0x1B	; 27
 8d6:	92 e0       	ldi	r25, 0x02	; 2
 8d8:	e0 e0       	ldi	r30, 0x00	; 0
 8da:	fa e0       	ldi	r31, 0x0A	; 10
 8dc:	80 a7       	std	Z+40, r24	; 0x28
 8de:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 8e0:	21 e0       	ldi	r18, 0x01	; 1
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e1       	ldi	r25, 0x10	; 16
 8e6:	ab e1       	ldi	r26, 0x1B	; 27
 8e8:	b0 e0       	ldi	r27, 0x00	; 0
 8ea:	0b b6       	in	r0, 0x3b	; 59
 8ec:	ab bf       	out	0x3b, r26	; 59
 8ee:	fc 01       	movw	r30, r24
 8f0:	20 83       	st	Z, r18
 8f2:	0b be       	out	0x3b, r0	; 59
			check_BF();
 8f4:	1f dd       	rcall	.-1474   	; 0x334 <check_BF>
			out_string("A#6/Bb6");
 8f6:	80 ea       	ldi	r24, 0xA0	; 160
 8f8:	90 e2       	ldi	r25, 0x20	; 32
 8fa:	56 dd       	rcall	.-1364   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 8fc:	20 ec       	ldi	r18, 0xC0	; 192
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e1       	ldi	r25, 0x10	; 16
 902:	ab e1       	ldi	r26, 0x1B	; 27
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	0b b6       	in	r0, 0x3b	; 59
 908:	ab bf       	out	0x3b, r26	; 59
 90a:	fc 01       	movw	r30, r24
 90c:	20 83       	st	Z, r18
 90e:	0b be       	out	0x3b, r0	; 59
			check_BF();
 910:	11 dd       	rcall	.-1502   	; 0x334 <check_BF>
			out_string("1864.66 Hz");
 912:	88 ea       	ldi	r24, 0xA8	; 168
 914:	90 e2       	ldi	r25, 0x20	; 32
 916:	48 dd       	rcall	.-1392   	; 0x3a8 <out_string>
			soundStop(timenote);
 918:	88 e9       	ldi	r24, 0x98	; 152
 91a:	9a e3       	ldi	r25, 0x3A	; 58
 91c:	b1 cd       	rjmp	.-1182   	; 0x480 <soundStop>
			break;
 91e:	08 95       	ret
		case 'B':
			TCE0.CCA = 0x1FD; //1975.53
 920:	8d ef       	ldi	r24, 0xFD	; 253
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	e0 e0       	ldi	r30, 0x00	; 0
 926:	fa e0       	ldi	r31, 0x0A	; 10
 928:	80 a7       	std	Z+40, r24	; 0x28
 92a:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 92c:	21 e0       	ldi	r18, 0x01	; 1
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	90 e1       	ldi	r25, 0x10	; 16
 932:	ab e1       	ldi	r26, 0x1B	; 27
 934:	b0 e0       	ldi	r27, 0x00	; 0
 936:	0b b6       	in	r0, 0x3b	; 59
 938:	ab bf       	out	0x3b, r26	; 59
 93a:	fc 01       	movw	r30, r24
 93c:	20 83       	st	Z, r18
 93e:	0b be       	out	0x3b, r0	; 59
			check_BF();
 940:	f9 dc       	rcall	.-1550   	; 0x334 <check_BF>
			out_string("B6");
 942:	83 eb       	ldi	r24, 0xB3	; 179
 944:	90 e2       	ldi	r25, 0x20	; 32
 946:	30 dd       	rcall	.-1440   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 948:	20 ec       	ldi	r18, 0xC0	; 192
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e1       	ldi	r25, 0x10	; 16
 94e:	ab e1       	ldi	r26, 0x1B	; 27
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	0b b6       	in	r0, 0x3b	; 59
 954:	ab bf       	out	0x3b, r26	; 59
 956:	fc 01       	movw	r30, r24
 958:	20 83       	st	Z, r18
 95a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 95c:	eb dc       	rcall	.-1578   	; 0x334 <check_BF>
			out_string("1975.53 Hz");
 95e:	86 eb       	ldi	r24, 0xB6	; 182
 960:	90 e2       	ldi	r25, 0x20	; 32
 962:	22 dd       	rcall	.-1468   	; 0x3a8 <out_string>
			soundStop(timenote);
 964:	88 e9       	ldi	r24, 0x98	; 152
 966:	9a e3       	ldi	r25, 0x3A	; 58
 968:	8b cd       	rjmp	.-1258   	; 0x480 <soundStop>
			break;
 96a:	08 95       	ret
		case 'C':
			TCE0.CCA = 0x1E0; //2093.00
 96c:	80 ee       	ldi	r24, 0xE0	; 224
 96e:	91 e0       	ldi	r25, 0x01	; 1
 970:	e0 e0       	ldi	r30, 0x00	; 0
 972:	fa e0       	ldi	r31, 0x0A	; 10
 974:	80 a7       	std	Z+40, r24	; 0x28
 976:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 978:	21 e0       	ldi	r18, 0x01	; 1
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e1       	ldi	r25, 0x10	; 16
 97e:	ab e1       	ldi	r26, 0x1B	; 27
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	0b b6       	in	r0, 0x3b	; 59
 984:	ab bf       	out	0x3b, r26	; 59
 986:	fc 01       	movw	r30, r24
 988:	20 83       	st	Z, r18
 98a:	0b be       	out	0x3b, r0	; 59
			check_BF();
 98c:	d3 dc       	rcall	.-1626   	; 0x334 <check_BF>
			out_string("C7");
 98e:	81 ec       	ldi	r24, 0xC1	; 193
 990:	90 e2       	ldi	r25, 0x20	; 32
 992:	0a dd       	rcall	.-1516   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 994:	20 ec       	ldi	r18, 0xC0	; 192
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	90 e1       	ldi	r25, 0x10	; 16
 99a:	ab e1       	ldi	r26, 0x1B	; 27
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	0b b6       	in	r0, 0x3b	; 59
 9a0:	ab bf       	out	0x3b, r26	; 59
 9a2:	fc 01       	movw	r30, r24
 9a4:	20 83       	st	Z, r18
 9a6:	0b be       	out	0x3b, r0	; 59
			check_BF();
 9a8:	c5 dc       	rcall	.-1654   	; 0x334 <check_BF>
			out_string("2093.00 Hz");
 9aa:	84 ec       	ldi	r24, 0xC4	; 196
 9ac:	90 e2       	ldi	r25, 0x20	; 32
 9ae:	fc dc       	rcall	.-1544   	; 0x3a8 <out_string>
			soundStop(timenote);
 9b0:	88 e9       	ldi	r24, 0x98	; 152
 9b2:	9a e3       	ldi	r25, 0x3A	; 58
 9b4:	65 cd       	rjmp	.-1334   	; 0x480 <soundStop>
			break;
 9b6:	08 95       	ret
		case 'D':
			TCE0.CCA = 0x1C5; //2217.46
 9b8:	85 ec       	ldi	r24, 0xC5	; 197
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	e0 e0       	ldi	r30, 0x00	; 0
 9be:	fa e0       	ldi	r31, 0x0A	; 10
 9c0:	80 a7       	std	Z+40, r24	; 0x28
 9c2:	91 a7       	std	Z+41, r25	; 0x29
			__far_mem_write(LCD_COM, 0x01);
 9c4:	21 e0       	ldi	r18, 0x01	; 1
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	90 e1       	ldi	r25, 0x10	; 16
 9ca:	ab e1       	ldi	r26, 0x1B	; 27
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	0b b6       	in	r0, 0x3b	; 59
 9d0:	ab bf       	out	0x3b, r26	; 59
 9d2:	fc 01       	movw	r30, r24
 9d4:	20 83       	st	Z, r18
 9d6:	0b be       	out	0x3b, r0	; 59
			check_BF();
 9d8:	ad dc       	rcall	.-1702   	; 0x334 <check_BF>
			out_string("C#7/Db7");
 9da:	8f ec       	ldi	r24, 0xCF	; 207
 9dc:	90 e2       	ldi	r25, 0x20	; 32
 9de:	e4 dc       	rcall	.-1592   	; 0x3a8 <out_string>
			__far_mem_write(LCD_COM, 0xC0);
 9e0:	20 ec       	ldi	r18, 0xC0	; 192
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	90 e1       	ldi	r25, 0x10	; 16
 9e6:	ab e1       	ldi	r26, 0x1B	; 27
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	0b b6       	in	r0, 0x3b	; 59
 9ec:	ab bf       	out	0x3b, r26	; 59
 9ee:	fc 01       	movw	r30, r24
 9f0:	20 83       	st	Z, r18
 9f2:	0b be       	out	0x3b, r0	; 59
			check_BF();
 9f4:	9f dc       	rcall	.-1730   	; 0x334 <check_BF>
			out_string("2217.46 Hz");
 9f6:	87 ed       	ldi	r24, 0xD7	; 215
 9f8:	90 e2       	ldi	r25, 0x20	; 32
 9fa:	d6 dc       	rcall	.-1620   	; 0x3a8 <out_string>
			soundStop(timenote);
 9fc:	88 e9       	ldi	r24, 0x98	; 152
 9fe:	9a e3       	ldi	r25, 0x3A	; 58
 a00:	3f cd       	rjmp	.-1410   	; 0x480 <soundStop>
 a02:	08 95       	ret

00000a04 <checknotes>:
		checknotes(*song, stop);
		song++;
	}
}

void checknotes(char note, int stop) {
 a04:	9b 01       	movw	r18, r22
	//I use this for the songs and get each note individually, I algo include a pause
	switch (note)
 a06:	48 2f       	mov	r20, r24
 a08:	50 e0       	ldi	r21, 0x00	; 0
 a0a:	fa 01       	movw	r30, r20
 a0c:	f0 97       	sbiw	r30, 0x30	; 48
 a0e:	e1 34       	cpi	r30, 0x41	; 65
 a10:	f1 05       	cpc	r31, r1
 a12:	08 f0       	brcs	.+2      	; 0xa16 <checknotes+0x12>
 a14:	8a c0       	rjmp	.+276    	; 0xb2a <checknotes+0x126>
 a16:	ed 5e       	subi	r30, 0xED	; 237
 a18:	fe 4f       	sbci	r31, 0xFE	; 254
 a1a:	e3 c0       	rjmp	.+454    	; 0xbe2 <__tablejump2__>
	{
		delay();
		case '1':
			TCE0.CCA = 0x3C1; //1046.50
 a1c:	81 ec       	ldi	r24, 0xC1	; 193
 a1e:	93 e0       	ldi	r25, 0x03	; 3
 a20:	e0 e0       	ldi	r30, 0x00	; 0
 a22:	fa e0       	ldi	r31, 0x0A	; 10
 a24:	80 a7       	std	Z+40, r24	; 0x28
 a26:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a28:	c9 01       	movw	r24, r18
 a2a:	2a cd       	rjmp	.-1452   	; 0x480 <soundStop>
			break;
 a2c:	08 95       	ret
		case '2':
			TCE0.CCA = 0x38B; //1108.73
 a2e:	8b e8       	ldi	r24, 0x8B	; 139
 a30:	93 e0       	ldi	r25, 0x03	; 3
 a32:	e0 e0       	ldi	r30, 0x00	; 0
 a34:	fa e0       	ldi	r31, 0x0A	; 10
 a36:	80 a7       	std	Z+40, r24	; 0x28
 a38:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a3a:	c9 01       	movw	r24, r18
 a3c:	21 cd       	rjmp	.-1470   	; 0x480 <soundStop>
			break;
 a3e:	08 95       	ret
		case '3':
			TCE0.CCA = 0x358; //1174.66
 a40:	88 e5       	ldi	r24, 0x58	; 88
 a42:	93 e0       	ldi	r25, 0x03	; 3
 a44:	e0 e0       	ldi	r30, 0x00	; 0
 a46:	fa e0       	ldi	r31, 0x0A	; 10
 a48:	80 a7       	std	Z+40, r24	; 0x28
 a4a:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a4c:	c9 01       	movw	r24, r18
 a4e:	18 cd       	rjmp	.-1488   	; 0x480 <soundStop>
			break;
 a50:	08 95       	ret
		case '4':
			TCE0.CCA = 0x328; //1244.51
 a52:	88 e2       	ldi	r24, 0x28	; 40
 a54:	93 e0       	ldi	r25, 0x03	; 3
 a56:	e0 e0       	ldi	r30, 0x00	; 0
 a58:	fa e0       	ldi	r31, 0x0A	; 10
 a5a:	80 a7       	std	Z+40, r24	; 0x28
 a5c:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a5e:	c9 01       	movw	r24, r18
 a60:	0f cd       	rjmp	.-1506   	; 0x480 <soundStop>
			break;
 a62:	08 95       	ret
		case '5':
			TCE0.CCA = 0x2FA; //1318.51
 a64:	8a ef       	ldi	r24, 0xFA	; 250
 a66:	92 e0       	ldi	r25, 0x02	; 2
 a68:	e0 e0       	ldi	r30, 0x00	; 0
 a6a:	fa e0       	ldi	r31, 0x0A	; 10
 a6c:	80 a7       	std	Z+40, r24	; 0x28
 a6e:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a70:	c9 01       	movw	r24, r18
 a72:	06 cd       	rjmp	.-1524   	; 0x480 <soundStop>
			break;
 a74:	08 95       	ret
		case '6':
			TCE0.CCA = 0x2D0; //1396.91
 a76:	80 ed       	ldi	r24, 0xD0	; 208
 a78:	92 e0       	ldi	r25, 0x02	; 2
 a7a:	e0 e0       	ldi	r30, 0x00	; 0
 a7c:	fa e0       	ldi	r31, 0x0A	; 10
 a7e:	80 a7       	std	Z+40, r24	; 0x28
 a80:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a82:	c9 01       	movw	r24, r18
 a84:	fd cc       	rjmp	.-1542   	; 0x480 <soundStop>
			break;
 a86:	08 95       	ret
		case '7':
			TCE0.CCA = 0x2A7; //1479.98
 a88:	87 ea       	ldi	r24, 0xA7	; 167
 a8a:	92 e0       	ldi	r25, 0x02	; 2
 a8c:	e0 e0       	ldi	r30, 0x00	; 0
 a8e:	fa e0       	ldi	r31, 0x0A	; 10
 a90:	80 a7       	std	Z+40, r24	; 0x28
 a92:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 a94:	c9 01       	movw	r24, r18
 a96:	f4 cc       	rjmp	.-1560   	; 0x480 <soundStop>
			break;
 a98:	08 95       	ret
		case '8':
			TCE0.CCA = 0x281; //1567.98
 a9a:	81 e8       	ldi	r24, 0x81	; 129
 a9c:	92 e0       	ldi	r25, 0x02	; 2
 a9e:	e0 e0       	ldi	r30, 0x00	; 0
 aa0:	fa e0       	ldi	r31, 0x0A	; 10
 aa2:	80 a7       	std	Z+40, r24	; 0x28
 aa4:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 aa6:	c9 01       	movw	r24, r18
 aa8:	eb cc       	rjmp	.-1578   	; 0x480 <soundStop>
			break;
 aaa:	08 95       	ret
		case '9':
			TCE0.CCA = 0x25D; //1661.22
 aac:	8d e5       	ldi	r24, 0x5D	; 93
 aae:	92 e0       	ldi	r25, 0x02	; 2
 ab0:	e0 e0       	ldi	r30, 0x00	; 0
 ab2:	fa e0       	ldi	r31, 0x0A	; 10
 ab4:	80 a7       	std	Z+40, r24	; 0x28
 ab6:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 ab8:	c9 01       	movw	r24, r18
 aba:	e2 cc       	rjmp	.-1596   	; 0x480 <soundStop>
			break;
 abc:	08 95       	ret
		case '0':
			TCE0.CCA = 0x23C; //1760.00
 abe:	8c e3       	ldi	r24, 0x3C	; 60
 ac0:	92 e0       	ldi	r25, 0x02	; 2
 ac2:	e0 e0       	ldi	r30, 0x00	; 0
 ac4:	fa e0       	ldi	r31, 0x0A	; 10
 ac6:	80 a7       	std	Z+40, r24	; 0x28
 ac8:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 aca:	c9 01       	movw	r24, r18
 acc:	d9 cc       	rjmp	.-1614   	; 0x480 <soundStop>
			break;
 ace:	08 95       	ret
		case 'A':
			TCE0.CCA = 0x21B; //1864.66
 ad0:	8b e1       	ldi	r24, 0x1B	; 27
 ad2:	92 e0       	ldi	r25, 0x02	; 2
 ad4:	e0 e0       	ldi	r30, 0x00	; 0
 ad6:	fa e0       	ldi	r31, 0x0A	; 10
 ad8:	80 a7       	std	Z+40, r24	; 0x28
 ada:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 adc:	c9 01       	movw	r24, r18
 ade:	d0 cc       	rjmp	.-1632   	; 0x480 <soundStop>
			break;
 ae0:	08 95       	ret
		case 'B':
			TCE0.CCA = 0x1FD; //1975.53
 ae2:	8d ef       	ldi	r24, 0xFD	; 253
 ae4:	91 e0       	ldi	r25, 0x01	; 1
 ae6:	e0 e0       	ldi	r30, 0x00	; 0
 ae8:	fa e0       	ldi	r31, 0x0A	; 10
 aea:	80 a7       	std	Z+40, r24	; 0x28
 aec:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 aee:	c9 01       	movw	r24, r18
 af0:	c7 cc       	rjmp	.-1650   	; 0x480 <soundStop>
			break;
 af2:	08 95       	ret
		case 'C':
			TCE0.CCA = 0x1E0; //2093.00	
 af4:	80 ee       	ldi	r24, 0xE0	; 224
 af6:	91 e0       	ldi	r25, 0x01	; 1
 af8:	e0 e0       	ldi	r30, 0x00	; 0
 afa:	fa e0       	ldi	r31, 0x0A	; 10
 afc:	80 a7       	std	Z+40, r24	; 0x28
 afe:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 b00:	c9 01       	movw	r24, r18
 b02:	be cc       	rjmp	.-1668   	; 0x480 <soundStop>
			break;
 b04:	08 95       	ret
		case 'D':
			TCE0.CCA = 0x1C5; //2217.46
 b06:	85 ec       	ldi	r24, 0xC5	; 197
 b08:	91 e0       	ldi	r25, 0x01	; 1
 b0a:	e0 e0       	ldi	r30, 0x00	; 0
 b0c:	fa e0       	ldi	r31, 0x0A	; 10
 b0e:	80 a7       	std	Z+40, r24	; 0x28
 b10:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(stop);
 b12:	c9 01       	movw	r24, r18
 b14:	b5 cc       	rjmp	.-1686   	; 0x480 <soundStop>
			break;
 b16:	08 95       	ret
		case 'p':
			TCE0.CCA = 0x01; //pause
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	e0 e0       	ldi	r30, 0x00	; 0
 b1e:	fa e0       	ldi	r31, 0x0A	; 10
 b20:	80 a7       	std	Z+40, r24	; 0x28
 b22:	91 a7       	std	Z+41, r25	; 0x29
			soundStop(10000);
 b24:	80 e1       	ldi	r24, 0x10	; 16
 b26:	97 e2       	ldi	r25, 0x27	; 39
 b28:	ab cc       	rjmp	.-1706   	; 0x480 <soundStop>
 b2a:	08 95       	ret

00000b2c <music>:
		default:
			break;
	}
}

void music (char* song, int stop) {
 b2c:	0f 93       	push	r16
 b2e:	1f 93       	push	r17
 b30:	cf 93       	push	r28
 b32:	df 93       	push	r29
 b34:	ec 01       	movw	r28, r24
 b36:	8b 01       	movw	r16, r22
	//Grabs each char individually to pass each note
	while (*song != 0x00) {
 b38:	88 81       	ld	r24, Y
 b3a:	88 23       	and	r24, r24
 b3c:	31 f0       	breq	.+12     	; 0xb4a <music+0x1e>
 b3e:	21 96       	adiw	r28, 0x01	; 1
		checknotes(*song, stop);
 b40:	b8 01       	movw	r22, r16
 b42:	60 df       	rcall	.-320    	; 0xa04 <checknotes>
	}
}

void music (char* song, int stop) {
	//Grabs each char individually to pass each note
	while (*song != 0x00) {
 b44:	89 91       	ld	r24, Y+
 b46:	81 11       	cpse	r24, r1
 b48:	fb cf       	rjmp	.-10     	; 0xb40 <music+0x14>
		checknotes(*song, stop);
		song++;
	}
}
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	08 95       	ret

00000b54 <main>:
void noise(char note);
void music(char* song, int stop);

int main(void)
{
	init_SP();
 b54:	87 dc       	rcall	.-1778   	; 0x464 <init_SP>
	init_EBI();
 b56:	c5 db       	rcall	.-2166   	; 0x2e2 <init_EBI>
	init_timer();
 b58:	78 dc       	rcall	.-1808   	; 0x44a <init_timer>
	init_lcd();
 b5a:	03 dc       	rcall	.-2042   	; 0x362 <init_lcd>
	k_init();
 b5c:	db db       	rcall	.-2122   	; 0x314 <k_init>
				check_BF();
				out_string("Ocarina of Time");
				music(song1, time1);
				break;
			case '#':
				__far_mem_write(LCD_COM, 0x01);
 b5e:	0f 2e       	mov	r0, r31
 b60:	c1 2c       	mov	r12, r1
 b62:	f0 e1       	ldi	r31, 0x10	; 16
 b64:	df 2e       	mov	r13, r31
 b66:	fb e1       	ldi	r31, 0x1B	; 27
 b68:	ef 2e       	mov	r14, r31
 b6a:	f1 2c       	mov	r15, r1
 b6c:	f0 2d       	mov	r31, r0
 b6e:	d1 e0       	ldi	r29, 0x01	; 1
				check_BF();
				out_string("Lugia's song");
				__far_mem_write(LCD_COM, 0xC0);
 b70:	c0 ec       	ldi	r28, 0xC0	; 192
	
	char lk = '1';
	
    while(1)
    {	
		input = get_key();
 b72:	dc dc       	rcall	.-1608   	; 0x52c <get_key>
		
		//This checks if you want to play a song or just a beep
		switch(input) {
 b74:	83 32       	cpi	r24, 0x23	; 35
 b76:	d9 f0       	breq	.+54     	; 0xbae <main+0x5a>
 b78:	8a 32       	cpi	r24, 0x2A	; 42
 b7a:	09 f0       	breq	.+2      	; 0xb7e <main+0x2a>
 b7c:	30 c0       	rjmp	.+96     	; 0xbde <main+0x8a>
			case '*':
				__far_mem_write(LCD_COM, 0x01);
 b7e:	0b b6       	in	r0, 0x3b	; 59
 b80:	eb be       	out	0x3b, r14	; 59
 b82:	f6 01       	movw	r30, r12
 b84:	d0 83       	st	Z, r29
 b86:	0b be       	out	0x3b, r0	; 59
				check_BF();
 b88:	d5 db       	rcall	.-2134   	; 0x334 <check_BF>
				out_string("Song of Time");
 b8a:	82 ee       	ldi	r24, 0xE2	; 226
 b8c:	90 e2       	ldi	r25, 0x20	; 32
 b8e:	0c dc       	rcall	.-2024   	; 0x3a8 <out_string>
				__far_mem_write(LCD_COM, 0xC0);
 b90:	0b b6       	in	r0, 0x3b	; 59
 b92:	eb be       	out	0x3b, r14	; 59
 b94:	f6 01       	movw	r30, r12
 b96:	c0 83       	st	Z, r28
 b98:	0b be       	out	0x3b, r0	; 59
				check_BF();
 b9a:	cc db       	rcall	.-2152   	; 0x334 <check_BF>
				out_string("Ocarina of Time");
 b9c:	8f ee       	ldi	r24, 0xEF	; 239
 b9e:	90 e2       	ldi	r25, 0x20	; 32
 ba0:	03 dc       	rcall	.-2042   	; 0x3a8 <out_string>
				music(song1, time1);
 ba2:	60 e2       	ldi	r22, 0x20	; 32
 ba4:	7e e4       	ldi	r23, 0x4E	; 78
 ba6:	8f ef       	ldi	r24, 0xFF	; 255
 ba8:	90 e2       	ldi	r25, 0x20	; 32
 baa:	c0 df       	rcall	.-128    	; 0xb2c <music>
				break;
 bac:	e2 cf       	rjmp	.-60     	; 0xb72 <main+0x1e>
			case '#':
				__far_mem_write(LCD_COM, 0x01);
 bae:	0b b6       	in	r0, 0x3b	; 59
 bb0:	eb be       	out	0x3b, r14	; 59
 bb2:	f6 01       	movw	r30, r12
 bb4:	d0 83       	st	Z, r29
 bb6:	0b be       	out	0x3b, r0	; 59
				check_BF();
 bb8:	bd db       	rcall	.-2182   	; 0x334 <check_BF>
				out_string("Lugia's song");
 bba:	81 e1       	ldi	r24, 0x11	; 17
 bbc:	91 e2       	ldi	r25, 0x21	; 33
 bbe:	f4 db       	rcall	.-2072   	; 0x3a8 <out_string>
				__far_mem_write(LCD_COM, 0xC0);
 bc0:	0b b6       	in	r0, 0x3b	; 59
 bc2:	eb be       	out	0x3b, r14	; 59
 bc4:	f6 01       	movw	r30, r12
 bc6:	c0 83       	st	Z, r28
 bc8:	0b be       	out	0x3b, r0	; 59
				check_BF();
 bca:	b4 db       	rcall	.-2200   	; 0x334 <check_BF>
				out_string("Pokemon");
 bcc:	8e e1       	ldi	r24, 0x1E	; 30
 bce:	91 e2       	ldi	r25, 0x21	; 33
 bd0:	eb db       	rcall	.-2090   	; 0x3a8 <out_string>
				music(song2, time2);
 bd2:	68 ea       	ldi	r22, 0xA8	; 168
 bd4:	71 e6       	ldi	r23, 0x61	; 97
 bd6:	86 e2       	ldi	r24, 0x26	; 38
 bd8:	91 e2       	ldi	r25, 0x21	; 33
 bda:	a8 df       	rcall	.-176    	; 0xb2c <music>
				break;
 bdc:	ca cf       	rjmp	.-108    	; 0xb72 <main+0x1e>
			default:
				noise(input);
 bde:	00 dd       	rcall	.-1536   	; 0x5e0 <noise>
				lk = input;
				break;
 be0:	c8 cf       	rjmp	.-112    	; 0xb72 <main+0x1e>

00000be2 <__tablejump2__>:
 be2:	ee 0f       	add	r30, r30
 be4:	ff 1f       	adc	r31, r31

00000be6 <__tablejump__>:
 be6:	05 90       	lpm	r0, Z+
 be8:	f4 91       	lpm	r31, Z
 bea:	e0 2d       	mov	r30, r0
 bec:	19 94       	eijmp

00000bee <_exit>:
 bee:	f8 94       	cli

00000bf0 <__stop_program>:
 bf0:	ff cf       	rjmp	.-2      	; 0xbf0 <__stop_program>
